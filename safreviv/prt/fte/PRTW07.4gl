#-------------------------------------------------------------------------------
# File: PRTW07.4gl
# GENERATED BY fglwsdl 101601
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml


GLOBALS "PRTW07.inc"



#-------------------------------------------------------------------------------
# Service: CifrasControlExt
# Port:    CifrasControlExtPort
# Server:  http://192.168.6.191/PortabilidadInfonavitFovissste/Externos/CifrasControlExt
#-------------------------------------------------------------------------------

PRIVATE DEFINE cifrasControlMarcaDesmarcaExtHTTPReq     com.HTTPRequest
PRIVATE DEFINE cifrasControlMarcaDesmarcaExtHTTPResp    com.HTTPResponse
PRIVATE DEFINE v_estado_mensaje_ws STRING
PRIVATE DEFINE v_mensaje_ws STRING

#-------------------------------------------------------------------------------

FUNCTION consultaCifrasProcesarMarca(p_idssn,p_cuerpo)
DEFINE soapStatus INTEGER,
       p_idssn RECORD
          p_idSistema      INTEGER,
          p_idEbusiness    INTEGER,
          p_idPortafolio   INTEGER,
          p_idServicio     INTEGER,
          p_idCliente      INTEGER,
          p_idCanal        INTEGER,
          p_codoperCliente VARCHAR(50),
          p_fecha          DATETIME YEAR TO FRACTION(5)
       END RECORD,
       p_cuerpo RECORD
          p_entidad       VARCHAR(3),
          p_fechaInicio   VARCHAR(10),
          p_fechaFin      VARCHAR(10),
          p_tipoSolicitud VARCHAR(2),
          p_diagnostico   VARCHAR(3)
       END RECORD

   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idSistema      = p_idssn.p_idSistema
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idEbusiness    = p_idssn.p_idEbusiness
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idPortafolio   = p_idssn.p_idPortafolio
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idServicio     = p_idssn.p_idServicio
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idCliente      = p_idssn.p_idCliente
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.idCanal        = p_idssn.p_idCanal
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.codoperCliente = p_idssn.p_codoperCliente
   LET ns1cifrasControlMarcaDesmarcaExtRequest.idssn.fecha          = p_idssn.p_fecha

   LET ns1cifrasControlMarcaDesmarcaExtRequest.cuerpo.entidad       = p_cuerpo.p_entidad
   LET ns1cifrasControlMarcaDesmarcaExtRequest.cuerpo.fechaInicio   = p_cuerpo.p_fechaInicio
   LET ns1cifrasControlMarcaDesmarcaExtRequest.cuerpo.fechaFin      = p_cuerpo.p_fechaFin
   LET ns1cifrasControlMarcaDesmarcaExtRequest.cuerpo.tipoSolicitud = p_cuerpo.p_tipoSolicitud
   LET ns1cifrasControlMarcaDesmarcaExtRequest.cuerpo.diagnostico   = p_cuerpo.p_diagnostico
   
   TRY 
      CALL cifrasControlMarcaDesmarcaExt_g() RETURNING soapStatus
   END TRY

   IF( soapStatus = 0 )THEN
      LET v_estado_mensaje_ws = "RESPUESTA RECIBIDA CORRECTAMENTE"
   ELSE 
   
   END IF
   IF( v_estado_mensaje_ws IS NULL )THEN
      LET v_estado_mensaje_ws = ""
   END IF
   RETURN soapStatus,
          v_estado_mensaje_ws{,
          v_mensaje_ws}
END FUNCTION

#
# Operation: cifrasControlMarcaDesmarcaExt
#
#
# FUNCTION: cifrasControlMarcaDesmarcaExt_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ns1cifrasControlMarcaDesmarcaExtRequest
#   OUTPUT: GLOBAL ns1cifrasControlMarcaDesmarcaExtResponse
#
FUNCTION cifrasControlMarcaDesmarcaExt_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader
  DEFINE respuesta TEXT
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  --LET CifrasControlExt_CifrasControlExtPortLocation = "alias://prtconcifcont"
  IF CifrasControlExt_CifrasControlExtPortLocation IS NULL THEN
    LET CifrasControlExt_CifrasControlExtPortLocation = "http://192.168.6.191/PortabilidadInfonavitFovissste/Externos/CifrasControlExt"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(CifrasControlExt_CifrasControlExtPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://www.procesar.com.mx/PortabilidadInfonavitFovissste/Externo/CifrasControlExt/cifrasControlMarcaDesmarcaExt/\"")
  CATCH
    LET wsstatus = STATUS
    LET v_estado_mensaje_ws = "Cannot create HTTPRequest"
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(ns1cifrasControlMarcaDesmarcaExtRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
      
    CATCH
      LET wsstatus = STATUS
      LET v_estado_mensaje_ws = SQLCA.SQLERRM
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
      

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET v_estado_mensaje_ws = response.getStatusDescription()

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          {LET v_mensaje_ws = response.getTextResponse()
          LET reader = xml.StaxReader.Create()
          LOCATE respuesta IN MEMORY 
          LET respuesta = v_mensaje_ws
          CALL reader.readFromText(respuesta)}
          
          LET reader = response.beginXmlResponse() # Begin Streaming Response          
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,ns1cifrasControlMarcaDesmarcaExtResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0
          LET v_estado_mensaje_ws = response.getStatusDescription()

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
          LET v_estado_mensaje_ws = response.getStatusDescription()

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
          LET v_estado_mensaje_ws = response.getStatusDescription()

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
          LET v_estado_mensaje_ws = response.getStatusDescription()

      END CASE
    CATCH
      LET wsstatus = STATUS
      LET v_estado_mensaje_ws = SQLCA.SQLERRM
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      DISPLAY "Mensaje err:",SQLCA.SQLERRM
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION cifrasControlMarcaDesmarcaExtRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF cifrasControlMarcaDesmarcaExtHTTPReq IS NOT NULL AND cifrasControlMarcaDesmarcaExtHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    LET CifrasControlExt_CifrasControlExtPortLocation = "alias://prtconcifcont"
    IF CifrasControlExt_CifrasControlExtPortLocation IS NULL THEN
      LET CifrasControlExt_CifrasControlExtPortLocation = "http://192.168.6.191/PortabilidadInfonavitFovissste/Externos/CifrasControlExt"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET cifrasControlMarcaDesmarcaExtHTTPReq = com.HTTPRequest.Create(CifrasControlExt_CifrasControlExtPortLocation)
    CALL cifrasControlMarcaDesmarcaExtHTTPReq.setMethod("POST")
    CALL cifrasControlMarcaDesmarcaExtHTTPReq.setCharset("UTF-8")
    CALL cifrasControlMarcaDesmarcaExtHTTPReq.setHeader("SOAPAction","\"http://www.procesar.com.mx/PortabilidadInfonavitFovissste/Externo/CifrasControlExt/cifrasControlMarcaDesmarcaExt/\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET cifrasControlMarcaDesmarcaExtHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = cifrasControlMarcaDesmarcaExtHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(ns1cifrasControlMarcaDesmarcaExtRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL cifrasControlMarcaDesmarcaExtHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET cifrasControlMarcaDesmarcaExtHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET cifrasControlMarcaDesmarcaExtHTTPResp = cifrasControlMarcaDesmarcaExtHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET cifrasControlMarcaDesmarcaExtHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION cifrasControlMarcaDesmarcaExtResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.StaxReader

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF cifrasControlMarcaDesmarcaExtHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF cifrasControlMarcaDesmarcaExtHTTPResp IS NULL THEN
      # Still no response, try again
      LET cifrasControlMarcaDesmarcaExtHTTPResp = cifrasControlMarcaDesmarcaExtHTTPReq.getAsyncResponse()
    END IF

    IF cifrasControlMarcaDesmarcaExtHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE cifrasControlMarcaDesmarcaExtHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = cifrasControlMarcaDesmarcaExtHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL cifrasControlMarcaDesmarcaExtHTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = cifrasControlMarcaDesmarcaExtHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,ns1cifrasControlMarcaDesmarcaExtResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL cifrasControlMarcaDesmarcaExtHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||cifrasControlMarcaDesmarcaExtHTTPResp.getStatusCode()||" ("||cifrasControlMarcaDesmarcaExtHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET cifrasControlMarcaDesmarcaExtHTTPReq = NULL
  LET cifrasControlMarcaDesmarcaExtHTTPResp = NULL
  RETURN wsstatus
END FUNCTION


