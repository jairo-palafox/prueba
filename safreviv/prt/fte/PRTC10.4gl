#-------------------------------------------------------------------------------
# File: cprt.4gl
# GENERATED BY fglwsdl 141859
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml

DATABASE "safre_viv"
GLOBALS "PRTC10.inc"


#-------------------------------------------------------------------------------
# Service: CancelacionSolicitudPortabilidadService
# Port:    CancelacionSolicitudPortabilidadServicePortType
# Server:  http://172.16.16.204:6141/ws/r/cancelacionSolicitudPortabilidad
#-------------------------------------------------------------------------------

PRIVATE DEFINE cancelacionSolicitudPortabilidadHTTPReq     com.HTTPRequest
PRIVATE DEFINE cancelacionSolicitudPortabilidadHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

DEFINE t_resultados DYNAMIC ARRAY OF RECORD
   r_nss        CHAR(11),
   r_n_caso     DECIMAL(10,0),
   r_paterno    CHAR(40),
   r_materno    CHAR(40),
   r_nombre     CHAR(40),
   id_prt_solic DECIMAL(9,0)
END RECORD

MAIN
   DEFINE p_usuario_cod     CHAR(20),
          p_tpo_ejecucion   INTEGER,
          p_cad_ventana     STRING,
          v_ruta_listados   CHAR(40),
          v_ruta_bin        CHAR(40)
   DEFINE w          ui.Window
   DEFINE f          ui.Form
   DEFINE tot_reg    INTEGER
   DEFINE status_res SMALLINT
   DEFINE diag_res   SMALLINT

   --Filtro de búsqueda
   DEFINE f_busqueda RECORD
      v_nss    CHAR(11),
      v_n_caso VARCHAR(20)
   END RECORD
   
   LET p_usuario_cod   = ARG_VAL(1)
   LET p_tpo_ejecucion = ARG_VAL(2)
   LET p_cad_ventana   = ARG_VAL(3)

   --Se obtiene la ruta de control del módulo
   SELECT l.ruta_listados,l.ruta_bin
      INTO v_ruta_listados,v_ruta_bin
      FROM seg_modulo l
      WHERE l.modulo_cod = 'prt'

   CALL STARTLOG(v_ruta_listados CLIPPED ||"/"||p_usuario_cod CLIPPED||".PRTC10.log")
   OPEN WINDOW vtna WITH FORM v_ruta_bin CLIPPED||"/PRTC101"
   #Se asigna el titulo de la ventana y toma el control de la forma
      IF ( p_cad_ventana IS NOT NULL ) THEN
         CALL ui.Interface.setText(p_cad_ventana)
         LET w = ui.Window.getCurrent()
         LET f = w.getForm()
         CALL w.setText(p_cad_ventana)
      END IF
      
   DIALOG ATTRIBUTES(UNBUFFERED)

   --Buscando casos con estado 15 filtrando por numero de caso o NSS
      INPUT BY NAME f_busqueda.*
         ON ACTION aceptar
            CALL fn_busca_casos(f_busqueda.*) RETURNING tot_reg
            IF tot_reg > 0 THEN
               CALL f.setElementHidden("gpo_results",0)
               NEXT FIELD r_nss
            ELSE
               CALL fn_mensaje ("information","NSS o Número de Caso no tiene una solicitud en Trámite de Cancelación","question")
               CALL f.setElementHidden("gpo_results",1)
            END IF
         ON ACTION cancelar
            EXIT DIALOG
      END INPUT

      --Despliega los casos encontrados y envía la cancelación
      DISPLAY ARRAY t_resultados TO t_resultados.*
         ON ACTION aceptar
            IF fn_ventana_confirma("information","¿Desea cancelar la Solicitud de Trámite?","question") THEN
               CALL fn_envia_solicitud(t_resultados[ARR_CURR()].r_n_caso) RETURNING status_res,diag_res
               IF status_res <> -1 THEN 
                  CALL fn_despliega_respuesta(status_res,diag_res)
               END IF
               --Vuelve a buscar los casos para actualizar la tabla
               CALL fn_busca_casos(f_busqueda.*) RETURNING tot_reg
               IF tot_reg > 1 THEN
                  CALL f.setElementHidden("gpo_results",0)
               ELSE
                  CALL f.setElementHidden("gpo_results",1)
               END IF
               INITIALIZE f_busqueda.* TO NULL
            END IF
         ON ACTION cancelar
            EXIT DIALOG
      END DISPLAY

      BEFORE DIALOG
          CALL f.setElementHidden("gpo_results",1)
          INITIALIZE f_busqueda.* TO NULL
                   
      END DIALOG
   CLOSE WINDOW vtna

END MAIN

#
# Operation: cancelacionSolicitudPortabilidad
#
#
# FUNCTION: cancelacionSolicitudPortabilidad_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ns1cancelacionSolicitudPortabilidad
#   OUTPUT: GLOBAL ns1solicitudCancelacionPortabilidadResponse
#
FUNCTION cancelacionSolicitudPortabilidad_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri IS NULL THEN
--ADRESS  
    LET CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri = "http://172.16.16.204:6141/ws/r/cancelacionSolicitudPortabilidad"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
    CALL WSHelper_SetRequestHeaders(request, CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Request.Headers)
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Version)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL request.setHeader("Content-Encoding",CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL request.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(cancelacionSolicitudPortabilidad,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(response, CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Response.Headers)
      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,solicitudCancelacionPortabilidadResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION cancelacionSolicitudPortabilidadRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF cancelacionSolicitudPortabilidadHTTPReq IS NOT NULL AND cancelacionSolicitudPortabilidadHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri IS NULL THEN
--ADRESS    
      LET CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri = "http://172.16.16.204:6141/ws/r/cancelacionSolicitudPortabilidad"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET cancelacionSolicitudPortabilidadHTTPReq = com.HTTPRequest.Create(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri)
    CALL cancelacionSolicitudPortabilidadHTTPReq.setMethod("POST")
    CALL cancelacionSolicitudPortabilidadHTTPReq.setCharset("UTF-8")
    CALL cancelacionSolicitudPortabilidadHTTPReq.setHeader("SOAPAction","\"\"")
    CALL WSHelper_SetRequestHeaders(cancelacionSolicitudPortabilidadHTTPReq, CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Request.Headers)
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL cancelacionSolicitudPortabilidadHTTPReq.setVersion(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Version)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL cancelacionSolicitudPortabilidadHTTPReq.setHeader("Cookie",CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL cancelacionSolicitudPortabilidadHTTPReq.setConnectionTimeout(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL cancelacionSolicitudPortabilidadHTTPReq.setTimeout(CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL cancelacionSolicitudPortabilidadHTTPReq.setHeader("Content-Encoding",CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL cancelacionSolicitudPortabilidadHTTPReq.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET cancelacionSolicitudPortabilidadHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = cancelacionSolicitudPortabilidadHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(cancelacionSolicitudPortabilidad,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL cancelacionSolicitudPortabilidadHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET cancelacionSolicitudPortabilidadHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET cancelacionSolicitudPortabilidadHTTPResp = cancelacionSolicitudPortabilidadHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET cancelacionSolicitudPortabilidadHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION cancelacionSolicitudPortabilidadResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.StaxReader

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF cancelacionSolicitudPortabilidadHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF cancelacionSolicitudPortabilidadHTTPResp IS NULL THEN
      # Still no response, try again
      LET cancelacionSolicitudPortabilidadHTTPResp = cancelacionSolicitudPortabilidadHTTPReq.getAsyncResponse()
    END IF

    IF cancelacionSolicitudPortabilidadHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = cancelacionSolicitudPortabilidadHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(cancelacionSolicitudPortabilidadHTTPResp, CancelacionSolicitudPortabilidadService_CancelacionSolicitudPortabilidadServicePortTypeEndpoint.Binding.Response.Headers)
      CASE cancelacionSolicitudPortabilidadHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = cancelacionSolicitudPortabilidadHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL cancelacionSolicitudPortabilidadHTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = cancelacionSolicitudPortabilidadHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,solicitudCancelacionPortabilidadResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL cancelacionSolicitudPortabilidadHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||cancelacionSolicitudPortabilidadHTTPResp.getStatusCode()||" ("||cancelacionSolicitudPortabilidadHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET cancelacionSolicitudPortabilidadHTTPReq = NULL
  LET cancelacionSolicitudPortabilidadHTTPResp = NULL
  RETURN wsstatus

END FUNCTION

--/// FUNCION QUE BUSCAS LOS CASOS EN ESTADO 15 PARA ENVIAR AL WEBSERVICE
FUNCTION fn_busca_casos(p_nss,p_n_caso)

   DEFINE p_nss    CHAR(11)
   DEFINE p_n_caso VARCHAR(20)
   DEFINE p_qry    STRING
   DEFINE p_vars   SMALLINT
   DEFINE i        INTEGER

   LET p_vars = 0
   
   LET p_qry = " SELECT nss,
                       n_caso,
                       paterno,
                       materno,
                       nombre,
                       id_prt_solicitud_cedente
                   FROM prt_solicitud_cedente
                   WHERE estado = 15 "

   IF p_nss IS NOT NULL THEN
      LET p_vars = p_vars + 1
      LET p_qry = p_qry," AND nss = ? " CLIPPED
   END IF
   IF p_n_caso IS NOT NULL THEN
      LET p_vars = p_vars + 2
      LET p_qry = p_qry," AND n_caso = ? " CLIPPED
   END IF

   PREPARE prp_casos FROM p_qry
   DECLARE cur_casos CURSOR FOR prp_casos
   CASE p_vars
      WHEN 0
        OPEN cur_casos  
      WHEN 1
         OPEN cur_casos USING p_nss
      WHEN 2
         OPEN cur_casos USING p_n_caso
      WHEN 3
         OPEN cur_casos USING p_nss,p_n_caso
   END CASE
   LET i = 1
   FOREACH cur_casos INTO t_resultados[i].*
      LET i = i + 1
   END FOREACH
   CALL t_resultados.deleteElement(i)
   LET i = i -1
   CLOSE cur_casos
   FREE cur_casos
   FREE prp_casos 

   RETURN i

END FUNCTION

--// FUNCION QUE ENVÍA LA PETICIÓN AL WEBSERVICE CON EL NUMERO DE CASO
FUNCTION fn_envia_solicitud(p_n_caso)

   DEFINE wsstatus INTEGER
   DEFINE p_n_caso VARCHAR(20)
   DEFINE salida RECORD
      nss CHAR(11),
      no_caso DECIMAL(10,0),
      paterno CHAR(40),
      materno CHAR(40),
      nombre  CHAR(40),
      estatus SMALLINT,
      diagnostico SMALLINT
   END RECORD
   INITIALIZE salida.* TO NULL
   
   IF p_n_caso = "" OR p_n_caso IS NULL THEN
      CALL fn_mensaje ("information","El REGISTRO CONTIENE UN CASO NULO","question")
      LET salida.estatus = -1
      RETURN salida.estatus,salida.diagnostico   
   END IF
   
   LET cancelacionSolicitudPortabilidad.mensajeEntradaCancelacion.noCaso = p_n_caso
   INITIALIZE salida TO NULL
   CALL cancelacionSolicitudPortabilidad_g() RETURNING wsstatus
   LET salida.diagnostico = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.diagnostico
   LET salida.estatus = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.estatusAclaracion
   LET salida.materno = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.apMaterno
   LET salida.no_caso = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.noCaso
   LET salida.nombre = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.nombre
   LET salida.nss = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.nss
   LET salida.paterno = solicitudCancelacionPortabilidadResponse.mensajeSalidaCancelacion.apPaterno    

RETURN salida.estatus,salida.diagnostico   

END FUNCTION

--// FUNCION QUE DESPLIEGA LA RESPUESTA OBTENIDA DEL WS, BUSCANDO EN LOS CATÁLOGOS SU DESCRIPCIóN
FUNCTION fn_despliega_respuesta(p_status,p_diagnostico)

   DEFINE p_status      INTEGER
   DEFINE p_status_desc CHAR(40)
   DEFINE p_diagnostico INTEGER
   DEFINE p_diag_desc   CHAR(40)
   DEFINE p_salida      STRING

   IF p_diagnostico <> 0 THEN
      SELECT TRIM(estatus_cancelacion_desc)
         INTO p_status_desc
         FROM prt_cat_estatus_cancelacion 
		 WHERE estatus_cancelacion = p_status
      SELECT TRIM(diagnostico_cancelacion_desc)
         INTO p_diag_desc
	     FROM prt_cat_diagnostico_cancelacion
		 WHERE diagnostico_cancelacion = p_diagnostico
      LET p_salida = p_status_desc," - ",p_diag_desc
   ELSE
      LET p_salida = "EL WEB SERVICE SE ENCUENTRA ABAJO O NO DEVOLVIO NINGÚN VALOR"
   END IF

   CALL fn_mensaje("Atención",p_salida,"question")

END FUNCTION
