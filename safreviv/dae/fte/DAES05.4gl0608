--==============================================================================
-- Version: 1.0.0
-- Fecha ultima modificacion: 29/Nov/2017 --AG --Agregar columnas monto pago, rendimiento, fecha retiro
--==============================================================================

################################################################################
#Proyecto          => SAFRE VIVIENDA                                           #
#Propietario       => E.F.P.                                                   #
#Modulo            => DAE                                                      #
#Programa          => DAES05                                                   #
#Objetivo          => Lanzado para el extractor de detalle de pagos DAE        #
#Fecha inicio      => 22/12/2015                                               #
################################################################################

DATABASE safre_viv

GLOBALS
DEFINE g_pid         LIKE bat_ctr_proceso.pid, --  ID del proceso
       g_proceso_cod LIKE cat_proceso.proceso_cod, -- codigo del proceso
       g_opera_cod   LIKE cat_operacion.opera_cod, -- codigo de operacion
       p_condicion   STRING
END GLOBALS
MAIN
DEFINE p_usuario_cod    LIKE seg_usuario.usuario_cod, -- clave del usuario firmado
       p_folio          LIKE deo_preliquida.folio_liquida, -- folio de la operacion
       p_nombre_archivo LIKE glo_ctr_archivo.nombre_archivo, -- nombre dle archivo
       p_d_inicial      DATE, -- Fecha inicial del periodo para el archivo de salida 
       p_d_final        DATE, -- Fecha final del periodo para el archivo de salida
       r_bnd_fin_oper   SMALLINT,
       i                INTEGER

   -- se recuperan los parametros que envia el programa lanzador
   -- usuario, pid, proceso_cod, opera_cod, folio, nombre_archivo
   LET p_usuario_cod    = ARG_VAL(1)
   LET g_pid            = ARG_VAL(2)
   LET g_proceso_cod    = ARG_VAL(3)
   LET g_opera_cod      = ARG_VAL(4)
   LET p_folio          = ARG_VAL(5)
   LET p_nombre_archivo = ARG_VAL(6)
   LET p_condicion      = ARG_VAL(7)

   CALL STARTLOG(p_usuario_cod CLIPPED|| ".DAES05.log")
   -- se obtiene el PID del proceso
   SELECT MAX(pid)
   INTO   g_pid
   FROM   bat_ctr_proceso
   WHERE  proceso_cod = g_proceso_cod
   -- Llamado a función que genera el archivo de salida
   CALL fn_consulta_registros(p_usuario_cod, p_d_inicial, p_d_final, p_folio)
   RETURNING i

   IF i >= 1 THEN 
      --CALL fn_archivo_salida(p_usuario_cod, p_d_inicial, p_d_final, p_folio)
      DISPLAY "PROCESO FINALIZADO "
   END IF

   -- se invoca la finalizacion de la operacion
   CALL fn_actualiza_opera_fin(g_pid, g_proceso_cod, g_opera_cod)
        RETURNING r_bnd_fin_oper
         
   IF r_bnd_fin_oper <> 0 THEN
         CALL fn_muestra_inc_operacion(r_bnd_fin_oper)
         DISPLAY "ERROR AL FINALIZAR LA OPERACIÓN", r_bnd_fin_oper
      END IF

END MAIN

#OBJETIVO: Generar el archivo de salida de DAE en base al folio seleccionado
FUNCTION fn_consulta_registros(p_usuario_cod, v_d_inicial, v_d_final, p_folio_liquida)
DEFINE p_usuario_cod         LIKE seg_usuario.usuario_cod, -- clave del usuario firmado
       v_d_inicial, -- Fecha inicial del periodo para el archivo de salida 
       v_d_final                DATE, -- Fecha final del periodo para el archivo de salida 
       i     INTEGER,
       j     INTEGER, 
       v_cont_dia               SMALLINT, -- consecutivo por dia de archivo generado
       v_folio_lote             DECIMAL(9,0),
       p_folio_liquida          DECIMAL(9,0),
       v_QryTxt12               STRING,
       v_QryTxt                 STRING,
       v_tot_monto_pesos        DECIMAL(16,6),
       v_tot_monto_aivs         DECIMAL(16,6),
       v_fecha_retiro           DATE, 
       v_precio_fondo           DECIMAL(19,14),
       v_monto_pagado           DECIMAL(16,6),
       v_monto_rendimiento      DECIMAL(16,6),
       v_tabla_cta_mvto         CHAR(20),
       vQryCta                  STRING 

DEFINE arr_detalles DYNAMIC ARRAY OF RECORD
          v_id_derechohabiente DECIMAL(9,0),
          v_num_credito        CHAR(10),
          v_fecha_pago         DATE,
          v_periodo_pago       CHAR(4),
          v_fec_reg_pag        CHAR(8),
          v_delegacion         CHAR(2),
          v_imp_amortizacion   DECIMAL(16,6),
          v_monto_aivs         DECIMAL(16,6),
          v_tipo_pago          CHAR(3),
          v_nss                CHAR(11),
          v_ent_receptora      CHAR(3),
          v_folio_liquida      DECIMAL(9,0),
          v_fec_ing_saci       DATE,
          v_ruta_nombre        STRING,
          v_folio_retiro       DECIMAL(9,0),
          v_folio_liquida_cta  DECIMAL(9,0),
          v_f_liquida          DATE
END RECORD 

DEFINE arr_cta_mov DYNAMIC ARRAY OF RECORD
    f_liquida date,
    id_derechohabiente decimal(9,0),
    subcuenta smallint,
    fondo_inversion smallint,
    movimiento smallint,
    folio_liquida decimal(9,0),
    id_referencia decimal(9,0),
    monto_acciones decimal(16,6),
    monto_pesos decimal(12,2),
    f_valor date,
    f_registro date,
    h_registro datetime hour to second,
    origen char(20)
END RECORD

   LET v_cont_dia = 1

   -- se crear el archivo log
   CALL STARTLOG(p_usuario_cod CLIPPED|| ".DAES05.log")

   LET  v_folio_lote =  p_folio_liquida

   DELETE 
   FROM safre_tmp:dae_tmp_det_extractor_pagado;

   DECLARE cur_tab_mvto CURSOR FOR SELECT tabla 
                                   FROM   cat_tab_movimiento

   DISPLAY "   Inicia consulta de registros pagados."
   FOREACH cur_tab_mvto INTO v_tabla_cta_mvto
      DISPLAY "   ", v_tabla_cta_mvto

      LET vQryCta = " SELECT *",
                    "\n FROM ", v_tabla_cta_mvto,
                    "\n WHERE subcuenta = 46 ",
                    "\n AND   movimiento = 1402 ",
                    "\n AND   id_derechohabiente = 9391840 "

      PREPARE prp_cta_mov FROM vQryCta
      DECLARE cur_cta_mov CURSOR FOR prp_cta_mov

      LET i = 1
      FOREACH cur_cta_mov INTO arr_cta_mov[i].*

         INSERT INTO tmp_dae_cta_movimiento 
              VALUES (arr_cta_mov[i].f_liquida,
                      arr_cta_mov[i].id_derechohabiente,
                      arr_cta_mov[i].subcuenta,
                      arr_cta_mov[i].fondo_inversion,
                      arr_cta_mov[i].movimiento,
                      arr_cta_mov[i].folio_liquida,
                      arr_cta_mov[i].id_referencia,
                      arr_cta_mov[i].monto_acciones,
                      arr_cta_mov[i].monto_pesos,
                      arr_cta_mov[i].f_valor,
                      arr_cta_mov[i].f_registro,
                      arr_cta_mov[i].h_registro,
                      arr_cta_mov[i].origen)

         LET i = i + 1;
      END FOREACH
   END FOREACH

   INITIALIZE arr_cta_mov[i].* TO NULL
   FREE cur_cta_mov

   LET vQryCta = "\n SELECT f_liquida, ", 
                 "\n        id_derechohabiente, ",
                 "\n        monto_acciones ",
                 "\n FROM   tmp_dae_cta_movimiento "

   PREPARE prp_mov_tmp FROM vQryCta
   DECLARE cur_mov_tmp CURSOR FOR prp_mov_tmp

      LET j = 1
      FOREACH cur_cta_mov INTO arr_cta_mov[j].*

         LET i = i + 1;
      END FOREACH
   
         LET v_QryTxt12 = "\n SELECT a.id_derechohabiente,", 
                     "\n        a.num_credito, ",
                     "\n        a.fecha_pago, ",
                     "\n        a.periodo_pago, ",
                     "\n        a.registro_pago, ",
                     "\n        a.delegacion, ",
                     "\n        a.importe_amort, ",
                     "\n        a.monto_aivs, ",
                     "\n        a.tipo_pago, ",
                     "\n        a.nss, ",
                     "\n        a.entidad_receptora,",
                     "\n        a.folio_liquida, ",
                     "\n        a.fecha_liquida ",
                     "\n FROM   dae_det_solicitud a ", 
                     "\n WHERE  a.id_derechohabiente = ", arr_detalles[i].v_id_derechohabiente,
                     "\n AND    a.folio_liquida IS NOT NULL ",
                     "\n AND    a.status_retiro = 4",
                     "\n AND    a.folio_ajuste IS NULL ",
                     "\n AND    a.fecha_liquida < '", arr_detalles[i].v_f_liquida, "'",
                     --"\n AND   a.nss = '65785617682' ",
                     "\n GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13 "
   
         IF p_condicion <> "1=1" THEN
            LET v_QryTxt12 = v_QryTxt12 , "\n AND ", p_condicion  
         END IF
   
         PREPARE prp_detalles_12 FROM v_QryTxt12
         DECLARE cur_detalles_12 CURSOR FOR prp_detalles_12 

         LET v_tot_monto_pesos = 0;
         LET v_tot_monto_aivs  = 0;
         LET v_monto_pagado = 0;
         LET v_monto_rendimiento = 0;
         LET v_fecha_retiro = NULL

         --Cunsulta periodo 2012- AÑO ACTUAL -1 
         FOREACH cur_detalles_12 INTO arr_detalles[i].v_id_derechohabiente,
                                      arr_detalles[i].v_num_credito,
                                      arr_detalles[i].v_fecha_pago,
                                      arr_detalles[i].v_periodo_pago,
                                      arr_detalles[i].v_fec_reg_pag,
                                      arr_detalles[i].v_delegacion,
                                      arr_detalles[i].v_imp_amortizacion ,
                                      arr_detalles[i].v_monto_aivs,
                                      arr_detalles[i].v_tipo_pago,
                                      arr_detalles[i].v_nss,
                                      arr_detalles[i].v_ent_receptora,
                                      arr_detalles[i].v_folio_liquida,
                                      arr_detalles[i].v_fec_ing_saci

            INSERT INTO safre_tmp:dae_tmp_det_extractor_pagado
            VALUES (arr_detalles[i].v_id_derechohabiente,
                    arr_detalles[i].v_num_credito,
                    arr_detalles[i].v_fecha_pago,
                    arr_detalles[i].v_periodo_pago,
                    arr_detalles[i].v_fec_reg_pag,
                    arr_detalles[i].v_delegacion,
                    arr_detalles[i].v_imp_amortizacion ,
                    arr_detalles[i].v_monto_aivs,
                    0,--v_precio_fondo,
                    arr_detalles[i].v_tipo_pago,
                    arr_detalles[i].v_nss,
                    arr_detalles[i].v_ent_receptora,
                    arr_detalles[i].v_folio_liquida,
                    arr_detalles[i].v_fec_ing_saci, 0,0,
                    arr_detalles[i].v_f_liquida)
                    --v_monto_pagado,
                    --v_monto_rendimiento,
                    --arr_detalles[i].v_f_liquida)
   
            LET i = i+1;

            INITIALIZE arr_detalles[i].v_num_credito,
                       arr_detalles[i].v_fecha_pago,
                       arr_detalles[i].v_periodo_pago,
                       arr_detalles[i].v_fec_reg_pag,
                       arr_detalles[i].v_delegacion,
                       arr_detalles[i].v_imp_amortizacion ,
                       arr_detalles[i].v_monto_aivs,
                       arr_detalles[i].v_tipo_pago,
                       arr_detalles[i].v_nss,
                       arr_detalles[i].v_ent_receptora,
                       arr_detalles[i].v_folio_liquida,
                       arr_detalles[i].v_fec_ing_saci TO NULL

            LET v_tot_monto_pesos = 0;
            LET v_tot_monto_aivs  = 0;
            LET v_monto_pagado = 0;
            LET v_monto_rendimiento = 0;
            LET v_fecha_retiro = NULL;
         END FOREACH

         INITIALIZE arr_detalles[i].v_id_derechohabiente,
                    arr_detalles[i].v_f_liquida  TO NULL

      END FOREACH
   END FOREACH
{
      LET vQryCta = " SELECT id_derechohabiente, f_liquida",
                    "\n FROM cta_movimiento ",
                    "\n WHERE subcuenta = 46 ",
                    "\n AND   movimiento = 1402 "

      PREPARE prp_cta_mov_ FROM vQryCta
      DECLARE cur_cta_mov_ CURSOR FOR prp_cta_mov_

      FOREACH cur_cta_mov_ INTO arr_detalles[i].v_id_derechohabiente,
                                arr_detalles[i].v_f_liquida

         LET v_QryTxt = "\n SELECT a.id_derechohabiente,", 
                     "\n        a.num_credito, ",
                     "\n        a.fecha_pago, ",
                     "\n        a.periodo_pago, ",
                     "\n        a.registro_pago, ",
                     "\n        a.delegacion, ",
                     "\n        a.importe_amort, ",
                     "\n        a.monto_aivs, ",
                     "\n        a.tipo_pago, ",
                     "\n        a.nss, ",
                     "\n        a.entidad_receptora,",
                     "\n        a.folio_liquida, ",
                     "\n        a.fecha_liquida ",
                     "\n FROM   dae_det_solicitud a ", 
                     "\n WHERE  a.id_derechohabiente = ", arr_detalles[i].v_id_derechohabiente,
                     "\n AND    a.folio_liquida IS NOT NULL ",
                     "\n AND    a.status_retiro = 4",
                     "\n AND    a.folio_ajuste IS NULL ",
                     "\n AND    a.fecha_liquida < '", arr_detalles[i].v_f_liquida, "'",
                     --"\n AND   a.nss = '65785617682' ",
                     "\n GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13 "
   
         IF p_condicion <> "1=1" THEN
            LET v_QryTxt = v_QryTxt , "\n AND ", p_condicion  
         END IF
   
         PREPARE prp_detalles FROM v_QryTxt
         DECLARE cur_detalles CURSOR FOR prp_detalles
   
         --LET i = 1
         LET v_tot_monto_pesos = 0;
         LET v_tot_monto_aivs  = 0;
         LET v_monto_pagado = 0;
         LET v_monto_rendimiento = 0;
         LET v_fecha_retiro = NULL


         --Cunsulta periodo 2012- AÑO ACTUAL -1 
         FOREACH cur_detalles_12 INTO arr_detalles[i].v_id_derechohabiente,
                                      arr_detalles[i].v_num_credito,
                                      arr_detalles[i].v_fecha_pago,
                                      arr_detalles[i].v_periodo_pago,
                                      arr_detalles[i].v_fec_reg_pag,
                                      arr_detalles[i].v_delegacion,
                                      arr_detalles[i].v_imp_amortizacion ,
                                      arr_detalles[i].v_monto_aivs,
                                      arr_detalles[i].v_tipo_pago,
                                      arr_detalles[i].v_nss,
                                      arr_detalles[i].v_ent_receptora,
                                      arr_detalles[i].v_folio_liquida,
                                      arr_detalles[i].v_fec_ing_saci

               SELECT precio_fondo
               INTO   v_precio_fondo
               FROM   glo_valor_fondo
               WHERE  f_valuacion = arr_detalles[i].v_f_liquida
               AND    fondo = 11; 
   
               --Se obtiene monto pagado en pesos
               LET v_monto_pagado = (arr_detalles[i].v_monto_aivs * v_precio_fondo)
   
               IF v_monto_pagado  > 0 THEN 
                  LET v_monto_rendimiento = (v_monto_pagado - arr_detalles[i].v_imp_amortizacion)
               ELSE
                  LET v_monto_rendimiento = 0;
               END IF

            INSERT INTO safre_tmp:dae_tmp_det_extractor_pagado
            VALUES (arr_detalles[i].v_id_derechohabiente,
                    arr_detalles[i].v_num_credito,
                    arr_detalles[i].v_fecha_pago,
                    arr_detalles[i].v_periodo_pago,
                    arr_detalles[i].v_fec_reg_pag,
                    arr_detalles[i].v_delegacion,
                    arr_detalles[i].v_imp_amortizacion ,
                    arr_detalles[i].v_monto_aivs,
                    0, --v_precio_fondo,
                    arr_detalles[i].v_tipo_pago,
                    arr_detalles[i].v_nss,
                    arr_detalles[i].v_ent_receptora,
                    arr_detalles[i].v_folio_liquida,
                    arr_detalles[i].v_fec_ing_saci,0,0,arr_detalles[i].v_f_liquida)
                    --v_monto_pagado,
                    --v_monto_rendimiento,
                    --arr_detalles[i].v_f_liquida)

            LET i = i+1;

            INITIALIZE arr_detalles[i].* TO NULL
            LET v_tot_monto_pesos = 0;
            LET v_tot_monto_aivs  = 0;
            LET v_monto_pagado = 0;
            LET v_monto_rendimiento = 0;
            LET v_fecha_retiro = NULL;
         END FOREACH
      END FOREACH
      }

   IF i  < 1 THEN
      DISPLAY " No existe información para los parámetros solicitados"
   ELSE
      DISPLAY "   Finaliza consulta de registros pagados."
   END IF

   RETURN i

END FUNCTION --fn_archivo_salida

#Objetivo: genera el número consecutivo por día para el archivo de salida
FUNCTION fn_crea_nombre_archivo(p_ruta_envio,p_busca_nom_archivo)
DEFINE p_ruta_envio     LIKE seg_modulo.ruta_envio,
       p_busca_nom_archivo  VARCHAR(40),
       v_cmd                STRING,
       v_consecutivo        INTEGER
DEFINE fn CHAR(19)
DEFINE ch base.Channel

    LET v_cmd = "ls -lrt ",p_ruta_envio CLIPPED,"/ | grep -i '",p_busca_nom_archivo CLIPPED,"' |awk '{print $9}'"

    LET ch = base.Channel.create()
    CALL ch.setDelimiter(".")
    CALL ch.openPipe(v_cmd,"r")
    WHILE ch.read([fn])
       LET v_consecutivo = fn[14,14]
    END WHILE
    CALL ch.close()
    LET v_consecutivo = v_consecutivo + 1

    IF length(v_consecutivo) = 0 THEN
       LET v_consecutivo = 1
    END IF

    RETURN v_consecutivo

END FUNCTION

#OBJETIVO: Generar el archivo de salida de DAE en base al folio seleccionado
FUNCTION fn_archivo_salida(p_usuario_cod, v_d_inicial, v_d_final, p_folio_liquida)
DEFINE p_usuario_cod         LIKE seg_usuario.usuario_cod, -- clave del usuario firmado
       v_v_nom_archivo       CHAR(40), -- nombre del archivo de salida
       v_nom_archivo_axway   CHAR(40), -- nombre para transferenia de AXWAY
       v_v_ruta_nomarch      VARCHAR(100), -- ruta y nombre del archivo de salida
       v_c_ruta_env_dpe      LIKE seg_modulo.ruta_envio, -- ruta donde se colocara el archivo
       v_ch_arch_solTransf   BASE.CHANNEL, -- manejador de apuntador hacia archivo
       v_d_inicial, -- Fecha inicial del periodo para el archivo de salida 
       v_d_final                DATE, -- Fecha final del periodo para el archivo de salida 
       i     INTEGER, -- Total de trabajadores solo registros 03
       v_s_registro             STRING, -- registro a insertar
       v_d_hoy                  CHAR(8),
       v_busca_archivo          STRING,
       v_cont_dia               SMALLINT, -- consecutivo por dia de archivo generado
       v_reg_dia                SMALLINT, -- Parametro consecutivo de registro por dia
       v_folio_lote             DECIMAL(9,0),
       p_folio_liquida          DECIMAL(9,0),
       v_QryTxt                 STRING,
       v_tot_monto_pesos        DECIMAL(16,6),
       v_tot_monto_aivs         DECIMAL(16,6),
       v_tot_rendimiento        DECIMAL(16,6),
       v_tot_gral_pagado        DECIMAL(16,6),
       v_s_registro_sum         STRING,

       v_s_imp_amortizacion     STRING,
       v_s_monto_aivs           STRING,
       v_s_precio_fondo         STRING,
       v_s_folio_liquida        STRING,
       v_s_monto_pagado         STRING,
       v_s_monto_rendimiento    STRING,
       v_precio_fondo           DECIMAL(19,14),
       v_monto_pagado           DECIMAL(16,6),
       v_monto_rendimiento      DECIMAL(16,6)


DEFINE arr_detalles RECORD
          v_id_derechohabiente DECIMAL(9,0),
          v_num_credito        CHAR(10),
          v_fecha_pago         DATE,
          v_periodo_pago       CHAR(4),
          v_fec_reg_pag        CHAR(8),
          v_delegacion         CHAR(2),
          v_imp_amortizacion   DECIMAL(16,6),
          v_monto_aivs         DECIMAL(16,6),
          v_precio_fondo       DECIMAL(19,14),
          v_tipo_pago          CHAR(3),
          v_nss                CHAR(11),
          v_ent_receptora      CHAR(3),
          v_folio_liquida      DECIMAL(9,0),
          v_fec_ing_saci       DATE,
          v_ruta_nombre        STRING,
          v_monto_pagado       DECIMAL(16,6),
          v_monto_rendimiento  DECIMAL(16,6),
          v_fecha_retiro       DATE  
END RECORD

   LET v_cont_dia = 1

   -- se crear el archivo log
   CALL STARTLOG(p_usuario_cod CLIPPED|| ".DAES05.log")

   -- se obtienen la ruta envio del modulo
   SELECT ruta_envio 
   INTO   v_c_ruta_env_dpe
   FROM   seg_modulo
   WHERE  modulo_cod = 'dae'

   -- se crea el nombre del archivo y posteriormente se concatena con la ruta  
   LET v_d_hoy  = TODAY USING "DDMMYYYY"
   LET v_busca_archivo = "ERP_"||v_d_hoy||"_"

   --Obtine consecutivo para archivo por día
   CALL fn_crea_nombre_archivo(v_c_ruta_env_dpe,v_busca_archivo)
        RETURNING v_cont_dia
   
   LET v_reg_dia = v_cont_dia USING "&"
   LET v_v_nom_archivo = "/"||v_busca_archivo||v_reg_dia||".sdae"
   LET v_v_ruta_nomarch = v_c_ruta_env_dpe CLIPPED || v_v_nom_archivo
   --
   --Se crea nombre de archivo para transferencia de AXWAY 
   LET v_nom_archivo_axway =  "dae_"
   -- se crea el manejador de archivo
   LET v_ch_arch_solTransf = base.Channel.create()

   -- se crea archivo y se indica que se escribira en el mismo
   CALL v_ch_arch_solTransf.openFile(v_v_ruta_nomarch, "w" )

   LET  v_folio_lote =  p_folio_liquida

   LET v_QryTxt = "\n SELECT * ",
                  "\n FROM   safre_tmp:dae_tmp_det_extractor_pagado ",
                  "\n GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"

      -- Se llena el detalle del trabajador
      PREPARE prp_totales FROM v_QryTxt
      DECLARE cur_totales CURSOR FOR prp_totales

         LET i = 1
         LET v_tot_monto_pesos = 0
         LET v_tot_monto_aivs = 0
         LET v_tot_rendimiento = 0

         FOREACH cur_totales
            INTO arr_detalles.v_id_derechohabiente,
                 arr_detalles.v_num_credito,
                 arr_detalles.v_fecha_pago,
                 arr_detalles.v_periodo_pago,
                 arr_detalles.v_fec_reg_pag,
                 arr_detalles.v_delegacion,
                 arr_detalles.v_imp_amortizacion ,
                 arr_detalles.v_monto_aivs,
                 arr_detalles.v_precio_fondo,
                 arr_detalles.v_tipo_pago,
                 arr_detalles.v_nss,
                 arr_detalles.v_ent_receptora,
                 arr_detalles.v_folio_liquida,
                 arr_detalles.v_fec_ing_saci,
                 arr_detalles.v_monto_pagado,
                 arr_detalles.v_monto_rendimiento,
                 arr_detalles.v_fecha_retiro

   
               SELECT precio_fondo
               INTO   v_precio_fondo
               FROM   glo_valor_fondo
               WHERE  f_valuacion = arr_detalles.v_fecha_retiro
               AND    fondo = 11; 
   
               --Se obtiene monto pagado en pesos
               LET v_monto_pagado = (arr_detalles.v_monto_aivs * v_precio_fondo)
   
               IF v_monto_pagado  > 0 THEN 
                  LET v_monto_rendimiento = (v_monto_pagado - arr_detalles.v_imp_amortizacion)
               ELSE
                  LET v_monto_rendimiento = 0;
               END IF

            LET v_s_imp_amortizacion  = arr_detalles.v_imp_amortizacion
            LET v_s_monto_aivs        = arr_detalles.v_monto_aivs
            LET v_s_precio_fondo      = v_precio_fondo --arr_detalles.v_precio_fondo
            LET v_s_folio_liquida     = arr_detalles.v_folio_liquida
            LET v_s_monto_pagado      = v_monto_pagado --arr_detalles.v_monto_pagado
            LET v_s_monto_rendimiento = v_monto_rendimiento --arr_detalles.v_monto_rendimiento

            LET v_s_imp_amortizacion  = v_s_imp_amortizacion.trim() 
            LET v_s_monto_aivs        = v_s_monto_aivs.trim() 
            LET v_s_precio_fondo      = v_s_precio_fondo.trim() 
            LET v_s_folio_liquida     = v_s_folio_liquida.trim() 
            LET v_s_monto_pagado      = v_s_monto_pagado.trim() 
            LET v_s_monto_rendimiento = v_s_monto_rendimiento.trim()

            LET v_s_registro = arr_detalles.v_num_credito,
                               "|",arr_detalles.v_fecha_pago USING "YYYYMMDD",
                               "|",arr_detalles.v_periodo_pago,
                               "|",arr_detalles.v_fec_reg_pag,
                               "|",arr_detalles.v_delegacion,
                               "|",v_s_imp_amortizacion,
                               "|",v_s_monto_aivs,
                               "|",arr_detalles.v_tipo_pago,
                               "|",arr_detalles.v_nss,
                               "|",arr_detalles.v_ent_receptora,
                               "|",v_s_folio_liquida,
                               "|",arr_detalles.v_fec_ing_saci USING "YYYYMMDD",
                               "|",v_s_monto_pagado,
                               "|",v_s_monto_rendimiento,
                               "|",v_s_precio_fondo,
                               "|",arr_detalles.v_fecha_retiro USING "YYYYMMDD",
                               "|"

            LET v_s_registro = v_s_registro.trim()

            IF arr_detalles.v_imp_amortizacion  IS NOT NULL THEN
               LET v_tot_monto_pesos = v_tot_monto_pesos +  arr_detalles.v_imp_amortizacion
            END IF

            IF arr_detalles.v_monto_aivs IS NOT NULL THEN 
               LET v_tot_monto_aivs  = v_tot_monto_aivs + arr_detalles.v_monto_aivs
            END IF 

            IF arr_detalles.v_monto_rendimiento IS NOT NULL THEN 
               LET v_tot_rendimiento  = v_tot_rendimiento + arr_detalles.v_monto_rendimiento
            END IF 
            
            CALL v_ch_arch_solTransf.writeline(v_s_registro)
            
            LET i = i + 1

         END FOREACH -- Detalle trabajador

         LET i = i -1

         LET v_tot_gral_pagado = v_tot_monto_pesos + v_tot_rendimiento
         
         LET v_s_registro_sum = "TOTAL REGISTROS", i,
                                "| TOTAL MONTO PESOS ",v_tot_monto_pesos,
                                "| TOTAL MONTO ACCIONES ",v_tot_monto_aivs,
                                "| TOTAL MONTO RENDIMIENTO ",v_tot_rendimiento,
                                "\n TOTAL GENERAL PAGADO PESOS : ", v_tot_gral_pagado

         CALL v_ch_arch_solTransf.writeline(v_s_registro_sum)

   IF i  < 1 THEN
      DISPLAY " No existe información para los parámetros solicitados"
--      DELETE FROM safre_tmp:dae_tmp_det_extractor_pagado; 
   ELSE
--      DELETE FROM safre_tmp:dae_tmp_det_extractor_pagado; 

      DISPLAY "\n El archivo se creo satisfactoriamente dentro de la siguiente ruta: \n   ",
               v_v_ruta_nomarch
   END IF
   
   CALL v_ch_arch_solTransf.close()
   
END FUNCTION --fn_archivo_salida
