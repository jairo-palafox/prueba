#+ This 4gl was generated by Report from Database wizard - 2015-04-27T18:23:14

-- TODO: Rename "report1" to your report module name

SCHEMA safre_viv

TYPE report_data RECORD
    diagnostico  LIKE sep_cat_diag_confronta.diag_confronta,
    diag_desc    LIKE sep_cat_diag_confronta.diag_confronta_desc,
    total        INTEGER,
    big_total    INTEGER,
    ruta_envio   CHAR(255),
    nomb_archivo CHAR(30),
    data_table RECORD
        clasifica_separacion   LIKE sep_det_02_op27.clasifica_separacion,
        total_r                INTEGER
    END RECORD
END RECORD

DEFINE p_cod_error    INTEGER
DEFINE p_desc_error   CHAR(71)
DEFINE fst_err_flag   BOOLEAN

FUNCTION run_report1_to_handler(handler,p_big_total,p_ruta_envio,p_nomb_archivo)
    DEFINE
        data        report_data,
        handler om.SaxDocumentHandler
    DEFINE p_big_total    INTEGER
    DEFINE p_ruta_envio   CHAR(255)
    DEFINE p_nomb_archivo CHAR(30)
    DEFINE r_qry STRING

    LET fst_err_flag = FALSE
    WHENEVER SQLERROR CALL error_sql
    DECLARE cur_external CURSOR FOR 
        SELECT sep_cat_diag_confronta.diag_confronta,
            sep_cat_diag_confronta.diag_confronta_desc 
        FROM sep_cat_diag_confronta
        ORDER BY
            sep_cat_diag_confronta.diag_confronta

    START REPORT report1_report TO XML HANDLER handler

    --Datos de cabecera del archivo
    LET data.big_total = p_big_total
    LET data.ruta_envio = p_ruta_envio
    LET data.nomb_archivo = p_nomb_archivo

    OPEN cur_external
    FOREACH cur_external INTO data.diagnostico,data.diag_desc      
       LET data.total = 0
        --Formando la cadena para cada valor de data.diagnostico
       LET r_qry =" 
        SELECT 
            v_clasificacion,
            COUNT(*) total
        FROM 
            tmp_sep_op27
        WHERE 
            v_diagnostico = ?
        GROUP BY
            v_clasificacion
        ORDER BY
            v_clasificacion
        "
        --EJECUTANDO EL SEGUNDO FOREACH
        PREPARE prp FROM r_qry 
        DECLARE cur CURSOR FOR prp   
        OPEN cur USING data.diagnostico
        FOREACH cur INTO data.data_table.*
            LET data.total = data.total + data.data_table.total_r
            OUTPUT TO REPORT report1_report(data.*)
        END FOREACH 
        CLOSE cur
        FREE cur
    END FOREACH

    FINISH REPORT report1_report
    CLOSE cur_external
    FREE cur_external

    RETURN p_cod_error,p_desc_error

END FUNCTION

FUNCTION error_sql()
    IF NOT fst_err_flag THEN --CUANDO SE GENERA EL PRIMER ERROR LO ESCRIBE EN LAS VARIABLES
       LET p_cod_error  = SQLCA.SQLCODE
       LET p_desc_error = SQLCA.SQLERRM
       LET fst_err_flag = TRUE
    END IF
END FUNCTION

REPORT report1_report(data)
    DEFINE
        data        report_data
    ORDER EXTERNAL BY 
        data.diagnostico

    FORMAT
        FIRST PAGE HEADER
            PRINTX data.big_total,data.nomb_archivo,data.ruta_envio
        ON EVERY ROW
            PRINTX data.*
END REPORT

{
LET r_qry =" 
        SELECT 
            sep_det_02_op27.clasifica_separacion,
            COUNT(*) total
        FROM 
            sep_det_02_op27,
            sfr_marca_activa
        WHERE 
            sep_det_02_op27.id_derechohabiente_invadido = 
            sfr_marca_activa.id_derechohabiente
        AND
            sep_det_02_op27.diag_confronta = ?
        GROUP BY
            sep_det_02_op27.clasifica_separacion
        ORDER BY
            sep_det_02_op27.clasifica_separacion"
}


{
        SELECT 
            v_clasificacion,
            COUNT(*) total
        FROM 
            tmp_sep_op27
        WHERE 
            v_diagnostico = ?
        GROUP BY
            v_clasificacion
        ORDER BY
            v_clasificacion
}