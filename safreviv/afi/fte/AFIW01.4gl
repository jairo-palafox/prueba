# File: ActDatosMaestros.4gl
# GENERATED BY fglwsdl 101601
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml


GLOBALS "AFIW01.inc"



#-------------------------------------------------------------------------------
# Service: ActDatosMaestros
# Port:    ActDatosMaestrosPortType
# Server:  http://172.16.16.204:9102/ActDatosMaestros
#-------------------------------------------------------------------------------

PRIVATE DEFINE actdatmaestrosHTTPReq     com.HTTPRequest
PRIVATE DEFINE actdatmaestrosHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------
MAIN
   DEFINE v_nss      CHAR(11)
   DEFINE v_tpo_act  SMALLINT
   DEFINE v_rfc      CHAR(13)
   DEFINE v_curp     CHAR(18)
   DEFINE v_paterno  CHAR(40)
   DEFINE v_materno  CHAR(40)
   DEFINE v_nombre   CHAR(40)
   DEFINE v_nss_resp CHAR(11)
   DEFINE v_clave_resp CHAR(3)
   DEFINE v_desc_resp CHAR(40)
   DEFINE	soapStatus		INTEGER

   CLOSE WINDOW SCREEN

   OPEN WINDOW ADM WITH FORM "AFIW011"

   INPUT BY NAME v_nss,
                 v_tpo_act,
                 v_rfc,
                 v_curp,
                 v_paterno,
                 v_materno,
                 v_nombre ATTRIBUTES (UNBUFFERED)

   ON ACTION ACCEPT
      CALL actdatmaestros (v_nss,
                           v_tpo_act,
                           v_rfc,
                           v_curp,
                           v_paterno,
                           v_materno,
                           v_nombre) RETURNING soapStatus, actdatmaestrosResponse.nss, actdatmaestrosResponse.clave, actdatmaestrosResponse.descripcion

   --LET soapStatus = actdatmaestros_g()

  --RETURN soapStatus, actdatmaestrosResponse.nss, actdatmaestrosResponse.clave, actdatmaestrosResponse.descripcion

       DISPLAY actdatmaestrosResponse.nss         TO v_nss_resp
       DISPLAY actdatmaestrosResponse.clave       TO v_clave_resp
       DISPLAY actdatmaestrosResponse.descripcion TO v_desc_resp
      -- EXIT INPUT

   ON ACTION CANCEL
      EXIT INPUT
   END INPUT
   CLOSE WINDOW ADM

END MAIN 
#
# FUNCTION: actdatmaestros
#
FUNCTION actdatmaestros(p_nss, p_tpo_act, p_rfc, p_curp, p_paterno, p_materno, p_nombre)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_nss		STRING
  DEFINE	p_tpo_act		SMALLINT
  DEFINE	p_rfc		STRING
  DEFINE	p_curp		STRING
  DEFINE	p_paterno		STRING
  DEFINE	p_materno		STRING
  DEFINE	p_nombre		STRING

  LET actdatmaestrosRequest.nss = p_nss
  LET actdatmaestrosRequest.tpo_act = p_tpo_act
  LET actdatmaestrosRequest.rfc = p_rfc
  LET actdatmaestrosRequest.curp = p_curp
  LET actdatmaestrosRequest.paterno = p_paterno
  LET actdatmaestrosRequest.materno = p_materno
  LET actdatmaestrosRequest.nombre = p_nombre

  LET soapStatus = actdatmaestros_g()

  RETURN soapStatus, actdatmaestrosResponse.nss, actdatmaestrosResponse.clave, actdatmaestrosResponse.descripcion
END FUNCTION

#
# FUNCTION: actdatmaestros_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL actdatmaestrosRequest
#   OUTPUT: GLOBAL actdatmaestrosResponse
#
FUNCTION actdatmaestros_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ActDatosMaestros_ActDatosMaestrosPortTypeLocation IS NULL THEN
    --LET ActDatosMaestros_ActDatosMaestrosPortTypeLocation = "http://10.90.8.132/ActDatosMaestros/ws/r/ActDatosMaestrosServices" --"http://172.16.16.204:9102/ActDatosMaestros"
    --LET ActDatosMaestros_ActDatosMaestrosPortTypeLocation = "http://172.16.16.204:9102/ActDatosMaestros"
    LET ActDatosMaestros_ActDatosMaestrosPortTypeLocation = "http://10.90.8.133:9100/ActDatosMaestros"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ActDatosMaestros_ActDatosMaestrosPortTypeLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(actdatmaestrosRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,actdatmaestrosResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION actdatmaestrosRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF actdatmaestrosHTTPReq IS NOT NULL AND actdatmaestrosHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ActDatosMaestros_ActDatosMaestrosPortTypeLocation IS NULL THEN
      LET ActDatosMaestros_ActDatosMaestrosPortTypeLocation = "http://172.16.16.204:9102/ActDatosMaestros"
      --LET ActDatosMaestros_ActDatosMaestrosPortTypeLocation = "http://10.90.8.132/ActDatosMaestros/ws/r/ActDatosMaestrosServices"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET actdatmaestrosHTTPReq = com.HTTPRequest.Create(ActDatosMaestros_ActDatosMaestrosPortTypeLocation)
    CALL actdatmaestrosHTTPReq.setMethod("POST")
    CALL actdatmaestrosHTTPReq.setCharset("UTF-8")
    CALL actdatmaestrosHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET actdatmaestrosHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = actdatmaestrosHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(actdatmaestrosRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL actdatmaestrosHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET actdatmaestrosHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET actdatmaestrosHTTPResp = actdatmaestrosHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET actdatmaestrosHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION actdatmaestrosResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.StaxReader

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF actdatmaestrosHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF actdatmaestrosHTTPResp IS NULL THEN
      # Still no response, try again
      LET actdatmaestrosHTTPResp = actdatmaestrosHTTPReq.getAsyncResponse()
    END IF

    IF actdatmaestrosHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE actdatmaestrosHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = actdatmaestrosHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL actdatmaestrosHTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = actdatmaestrosHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,actdatmaestrosResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL actdatmaestrosHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||actdatmaestrosHTTPResp.getStatusCode()||" ("||actdatmaestrosHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET actdatmaestrosHTTPReq = NULL
  LET actdatmaestrosHTTPResp = NULL
  RETURN wsstatus
END FUNCTION