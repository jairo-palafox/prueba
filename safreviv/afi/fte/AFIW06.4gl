#-------------------------------------------------------------------------------
# File: AFIW06.4gl
# GENERATED BY fglwsdl 141859
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------

IMPORT FGL WSHelper
IMPORT com
IMPORT XML

DATABASE safre_viv

GLOBALS "AFIW06.inc"



#-------------------------------------------------------------------------------
# Service: SI_ActDatosMaestros_SOService
# Port:    HTTP_Port
# Server:  http://172.16.16.201/servicio
#-------------------------------------------------------------------------------

PRIVATE DEFINE SI_ActDatosMaestros_SOHTTPReq     com.HTTPRequest
PRIVATE DEFINE SI_ActDatosMaestros_SOHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

#
# Operation: SI_ActDatosMaestros_SO
#
MAIN

   DEFINE v_indicador   CHAR(1)
   DEFINE v_nss         CHAR(11)
   DEFINE v_partner     CHAR(5)
   DEFINE v_rfc         CHAR(13)
   DEFINE v_curp        CHAR(18)
   DEFINE v_paterno     CHAR(40)
   DEFINE v_materno     CHAR(40)
   DEFINE v_nombre      CHAR(40)
   DEFINE soapStatus    INTEGER
   DEFINE v_bnd         SMALLINT
   DEFINE v_paterno_af  CHAR(40)
   DEFINE v_materno_af  CHAR(40)
   DEFINE v_nombre_af   CHAR(40)
   DEFINE bnd_materno   SMALLINT

   LET v_bnd       = ARG_VAL (1)
   LET v_indicador = ARG_VAL (2)
   LET v_partner   = ARG_VAL (3)
   LET v_rfc       = ARG_VAL (4)
   LET v_curp      = ARG_VAL (5)
   LET v_nombre    = ARG_VAL (6)
   LET v_paterno   = ARG_VAL (7)
   LET v_materno   = ARG_VAL (8)
   LET v_nss       = ARG_VAL (9)

   IF v_partner = '' THEN
      LET v_partner = " "
   END IF

   IF v_rfc = '' THEN
      LET v_rfc = " "
   END IF

   IF v_curp = '' THEN
      LET v_curp = " "
   END IF

   IF v_nombre = '' THEN
      LET v_nombre = " "
   END IF

   IF v_paterno = '' THEN
      LET v_paterno = " "
   END IF

   IF v_materno = '' THEN
      LET v_materno = " "
   END IF

   IF v_indicador = "N" THEN

      SELECT ap_paterno_af,
             ap_materno_af,
             nombre_af
        INTO v_paterno_af,
             v_materno_af,
             v_nombre_af
        FROM afi_derechohabiente
       WHERE nss = v_nss

      IF (v_paterno IS NULL) OR
         (v_paterno = ' ') THEN
         LET v_paterno = v_paterno_af
      END IF

      IF (v_materno IS NULL) OR
         (v_materno = ' ') THEN
         IF v_materno_af IS NULL THEN
            LET v_materno = ' '
         ELSE
            LET v_materno = v_materno_af
         END IF
      END IF

      IF (v_nombre IS NULL) OR
         (v_nombre = ' ') THEN
         LET v_nombre = v_nombre_af
      END IF

   END IF

   LET bnd_materno = 0

   IF v_materno IS NULL THEN
      LET bnd_materno = 1
   END IF
{
   DISPLAY " bandera ap materno : ",bnd_materno

   DISPLAY "indicador : ",v_indicador
   DISPLAY "partner   : ",v_partner  
   DISPLAY "rfc       : ",v_rfc      
   DISPLAY "curp      : ",v_curp     
   DISPLAY "nombre    : ",v_nombre   
   DISPLAY "paterno   : ",v_paterno  
   DISPLAY "materno   : ",v_materno  
   DISPLAY "nss       : ",v_nss      
}
   IF v_bnd = 1 THEN
      CALL SI_ActDatosMaestros_SO( v_indicador,
                                   v_partner,
                                   v_rfc,
                                   v_curp,
                                   v_nombre,
                                   v_paterno,
                                   v_materno,
                                   v_nss)
      RETURNING soapStatus, MT_ActDatosMaestros_res.codigo, MT_ActDatosMaestros_res.descripcion
   END IF
      

 {  DISPLAY "soapStatus                          : ",soapStatus
   DISPLAY "MT_ActDatosMaestros_res.codigo      : ",MT_ActDatosMaestros_res.codigo
   DISPLAY "MT_ActDatosMaestros_res.descripcion : ",MT_ActDatosMaestros_res.descripcion
   DISPLAY ""
   DISPLAY "wsError.code        : ",wsError.code		
   DISPLAY "wsError.codeNS      : ",wsError.codeNS		
   DISPLAY "wsError.description : ",wsError.description
   DISPLAY "wsResCode           : ",MT_ActDatosMaestros_res.codigo
   DISPLAY "wsResDescription    : ",MT_ActDatosMaestros_res.descripcion
   }
END MAIN 
#
# FUNCTION: SI_ActDatosMaestros_SO
#
FUNCTION SI_ActDatosMaestros_SO(p_indicador, p_partner, p_rfc, p_curp, p_nombre, p_apaterno, p_amaterno, p_nss)
  DEFINE	p_indicador		STRING
  DEFINE	p_partner		STRING
  DEFINE	p_rfc		    STRING
  DEFINE	p_curp		    STRING
  DEFINE	p_nombre		STRING
  DEFINE	p_apaterno		STRING
  DEFINE	p_amaterno		STRING
  DEFINE	p_nss		    STRING
  DEFINE	soapStatus		INTEGER

  LET p_indicador =p_indicador.trim()
  LET p_partner   =p_partner.trim()
  LET p_rfc       =p_rfc.trim()
  LET p_curp      =p_curp.trim()
  LET p_nombre    =p_nombre.trim()
  LET p_apaterno  =p_apaterno.trim()
  LET p_amaterno  =p_amaterno.trim()
  LET p_nss       =p_nss.trim()

  LET MT_ActDatosMaestros_req.indicador =p_indicador
  LET MT_ActDatosMaestros_req.partner   =p_partner
  LET MT_ActDatosMaestros_req.rfc       =p_rfc
  LET MT_ActDatosMaestros_req.curp      =p_curp
  LET MT_ActDatosMaestros_req.nombre    =p_nombre
  LET MT_ActDatosMaestros_req.apaterno  =p_apaterno
  LET MT_ActDatosMaestros_req.amaterno  =p_amaterno
  LET MT_ActDatosMaestros_req.nss       =p_nss

{
   display "p_indicador : ",MT_ActDatosMaestros_req.indicador
   display "p_partner	: ",MT_ActDatosMaestros_req.partner
   display "p_rfc		: ",MT_ActDatosMaestros_req.rfc
   display "p_curp      : ",MT_ActDatosMaestros_req.curp
   display "p_nombre    : ",MT_ActDatosMaestros_req.nombre 
   display "p_apaterno	: ",MT_ActDatosMaestros_req.apaterno
   display "p_amaterno	: ",MT_ActDatosMaestros_req.amaterno
   display "p_nss	    : ",MT_ActDatosMaestros_req.nss 
}

  LET soapStatus = SI_ActDatosMaestros_SO_g()

  RETURN soapStatus, MT_ActDatosMaestros_res.codigo, MT_ActDatosMaestros_res.descripcion
END FUNCTION

#
# FUNCTION: SI_ActDatosMaestros_SO_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL MT_ActDatosMaestros_req
#   OUTPUT: GLOBAL MT_ActDatosMaestros_res
#
FUNCTION SI_ActDatosMaestros_SO_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri IS NULL THEN
    LET SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri = "alias://ActDatosMaestros"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://sap.com/xi/WebService/soap1.1\"")
    CALL WSHelper_SetRequestHeaders(request, SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Request.Headers)
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Version)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ConnectionTimeout)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL request.setHeader("Content-Encoding",SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.CompressRequest)
    END IF
    CALL request.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(MT_ActDatosMaestros_req,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(response, SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Response.Headers)
      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,MT_ActDatosMaestros_res)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION SI_ActDatosMaestros_SORequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF SI_ActDatosMaestros_SOHTTPReq IS NOT NULL AND SI_ActDatosMaestros_SOHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri IS NULL THEN
      LET SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri = "alias://ActDatosMaestros"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET SI_ActDatosMaestros_SOHTTPReq = com.HTTPRequest.Create(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri)
    CALL SI_ActDatosMaestros_SOHTTPReq.setMethod("POST")
    CALL SI_ActDatosMaestros_SOHTTPReq.setCharset("UTF-8")
    CALL SI_ActDatosMaestros_SOHTTPReq.setHeader("SOAPAction","\"http://sap.com/xi/WebService/soap1.1\"")
    CALL WSHelper_SetRequestHeaders(SI_ActDatosMaestros_SOHTTPReq, SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Request.Headers)
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Version IS NOT NULL THEN
      CALL SI_ActDatosMaestros_SOHTTPReq.setVersion(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Version)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL SI_ActDatosMaestros_SOHTTPReq.setHeader("Cookie",SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL SI_ActDatosMaestros_SOHTTPReq.setConnectionTimeout(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ConnectionTimeout)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL SI_ActDatosMaestros_SOHTTPReq.setTimeout(SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL SI_ActDatosMaestros_SOHTTPReq.setHeader("Content-Encoding",SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.CompressRequest)
    END IF
    CALL SI_ActDatosMaestros_SOHTTPReq.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET SI_ActDatosMaestros_SOHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = SI_ActDatosMaestros_SOHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(MT_ActDatosMaestros_req,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL SI_ActDatosMaestros_SOHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET SI_ActDatosMaestros_SOHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET SI_ActDatosMaestros_SOHTTPResp = SI_ActDatosMaestros_SOHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET SI_ActDatosMaestros_SOHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION SI_ActDatosMaestros_SOResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.StaxReader

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF SI_ActDatosMaestros_SOHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF SI_ActDatosMaestros_SOHTTPResp IS NULL THEN
      # Still no response, try again
      LET SI_ActDatosMaestros_SOHTTPResp = SI_ActDatosMaestros_SOHTTPReq.getAsyncResponse()
    END IF

    IF SI_ActDatosMaestros_SOHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = SI_ActDatosMaestros_SOHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(SI_ActDatosMaestros_SOHTTPResp, SI_ActDatosMaestros_SOService_HTTP_PortEndpoint.Binding.Response.Headers)
      CASE SI_ActDatosMaestros_SOHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = SI_ActDatosMaestros_SOHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL SI_ActDatosMaestros_SOHTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = SI_ActDatosMaestros_SOHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,MT_ActDatosMaestros_res)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL SI_ActDatosMaestros_SOHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||SI_ActDatosMaestros_SOHTTPResp.getStatusCode()||" ("||SI_ActDatosMaestros_SOHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET SI_ActDatosMaestros_SOHTTPReq = NULL
  LET SI_ActDatosMaestros_SOHTTPResp = NULL
  RETURN wsstatus

END FUNCTION


