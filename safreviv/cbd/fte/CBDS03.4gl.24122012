#########################################################################################
#Modulo       => CBD                                                                    #
#Programa     => CBDS03                                                                 #
#Objetivo     => Programa que genera el archivo de la BDNSVIV-plus utilizando HPL       #
#Fecha inicio => DICIEMBRE 2012                                                         #
#########################################################################################
DATABASE safre_viv

DEFINE p_pid                      LIKE bat_ctr_operacion.pid                  -- PID del proceso
DEFINE p_proceso_cod              LIKE bat_ctr_operacion.proceso_cod          -- codigo del proceso
DEFINE p_opera_cod                LIKE bat_ctr_operacion.opera_cod            -- codigo de la operacion
DEFINE p_usuario_cod              LIKE seg_usuario.usuario_cod                -- clave del usuario firmado
DEFINE p_nombre_archivo           LIKE glo_ctr_archivo.nombre_archivo         -- nombre dle archivo
DEFINE v_folio                    LIKE glo_ctr_archivo.folio

DEFINE v_proceso_desc             LIKE cat_proceso.proceso_desc
DEFINE v_extension                LIKE cat_operacion.extension
DEFINE v_opera_desc               LIKE cat_operacion.opera_desc
DEFINE v_detalle_monitoreo        STRING
DEFINE v_layout                   LIKE cat_operacion.layout_cod
DEFINE v_usuario_proceso          LIKE seg_modulo.usuario
DEFINE v_ruta_rescate             STRING
DEFINE v_ruta_listados            LIKE seg_modulo.ruta_listados

DEFINE v_fcorte                   DATE

DEFINE g_ruta_envio                       LIKE seg_modulo.ruta_envio

DEFINE g_archivo_imss                     STRING
DEFINE g_archivo_infonavit                STRING


MAIN
   DEFINE r_resultado_opera            INTEGER
   DEFINE v_resultado_gen              INTEGER

    -- se recuperan los parametros la clave de usuario desde parametro 
   -- argumento con indice 1
   LET p_usuario_cod    = ARG_VAL(1)
   LET p_pid            = ARG_VAL(2)
   LET p_proceso_cod    = ARG_VAL(3)
   LET p_opera_cod      = ARG_VAL(4)
   LET v_folio          = ARG_VAL(5)
   LET p_nombre_archivo = ARG_VAL(6)

   WHENEVER ERROR CONTINUE
   
   CALL fn_recupera_inf_proceso(p_proceso_cod, p_opera_cod) 
                               RETURNING v_proceso_desc,v_extension, 
                                         v_opera_desc,v_layout, 
                                         v_ruta_rescate,v_ruta_listados,
                                         v_usuario_proceso 

   #Encabezado para el archivo de monitoreo
   DISPLAY "*******************************************************************"
   LET v_detalle_monitoreo = " PROCESO            : ",v_proceso_desc,"\n",
                             " OPERACIÓN          : ",v_opera_desc,"\n",
                             " FECHA              : ",TODAY USING 'dd-mm-yyyy',"\n",
                             " HORA               : ",TIME(CURRENT)," "
   DISPLAY v_detalle_monitoreo;
   DISPLAY "*******************************************************************"

   CALL fn_inicializa_proceso(p_pid,p_proceso_cod,p_opera_cod,0,
                              "CBDS03",p_nombre_archivo,p_usuario_cod)
                                 RETURNING r_resultado_opera
   IF ( r_resultado_opera <> 0 ) THEN
      CALL fn_muestra_inc_operacion(r_resultado_opera)
   ELSE
      -- se solicita el numero de folio asociado a la operacion
      -- parametros: proceso, operacion, usuario
      CALL fn_genera_folio(p_proceso_cod,p_opera_cod,p_usuario_cod)
      RETURNING v_folio
   
      # Inicia operación
      CALL fn_actualiza_opera_ini(p_pid,p_proceso_cod,p_opera_cod,v_folio,"CBDS02",
                            p_nombre_archivo,p_usuario_cod) RETURNING r_resultado_opera
      # En el caso de que exista una inconsistencia al iniciar el proceso, se
      # Muestra un mensaje con la descripcion
      IF(r_resultado_opera)THEN
         CALL fn_muestra_inc_operacion(r_resultado_opera)
      ELSE
         #Se manda a generar el archivo de la bdnsviv-plus
         CALL fn_genera_archivo() RETURNING v_resultado_gen
         
         IF v_resultado_gen = 0 THEN
            # Finaliza la operacion de generacion del archivo
            CALL  fn_actualiza_opera_fin(p_pid,p_proceso_cod,p_opera_cod)
            RETURNING r_resultado_opera
            IF(r_resultado_opera <> 0)THEN         
               # Actualiza a estado erróneo
               CALL fn_error_opera(p_pid,p_proceso_cod,p_opera_cod) 
               RETURNING r_resultado_opera
            END IF 
         ELSE
            CALL fn_error_opera(p_pid,p_proceso_cod,p_opera_cod) 
               RETURNING r_resultado_opera
         END IF
      END IF
   END IF
   
   WHENEVER ERROR STOP
END MAIN

FUNCTION fn_genera_archivo()
   
   DISPLAY "Se inicia la creación de archivos HPL"

   -- se obtienen la ruta envio del modulo
   SELECT ruta_envio 
   INTO g_ruta_envio
   FROM seg_modulo
   WHERE modulo_cod = 'cbd'

   LET g_archivo_imss      = "saldo_imss_tmp"
   LET g_archivo_infonavit = "saldo_infonavit_tmp"

   LET v_fcorte = MDY(MONTH(TODAY),1,YEAR(TODAY)) - 1

   #Genera device HPL para archivo de Saldos IMSS

   CALL fn_crea_project("cbd")

   CALL fn_genera_device(g_ruta_envio,
                         g_archivo_imss,
                         p_usuario_cod)

   CALL fn_genera_query(g_ruta_envio,
                      g_archivo_imss,
                      p_usuario_cod)

   CALL fn_genera_format(g_ruta_envio,
                         g_archivo_imss,
                         p_usuario_cod)
   
   CALL fn_genera_map(g_ruta_envio,
                      g_archivo_imss,
                      p_usuario_cod)


   DISPLAY ""
   DISPLAY "Inicia la generacion de los detalles del archivo"
   DISPLAY ""

   PREPARE exe_pdq FROM "SET PDQPRIORITY HIGH"
   EXECUTE exe_pdq

   CALL fn_genera_job(g_ruta_envio,
                      g_archivo_imss,
                      p_usuario_cod,
                      'cbd')

   CALL fn_ejecuta_hpl(g_ruta_envio,
                      g_archivo_imss,
                      p_usuario_cod,
                      'cbd')

   
   RETURN 0
END FUNCTION

FUNCTION fn_genera_device(p_ruta_rescate,p_archivo_salida,p_usuario)
DEFINE p_ruta_rescate   STRING,--LIKE seg_modulo.ruta_rescate,
       p_archivo_salida LIKE cat_layout.archivo,
       p_usuario        LIKE seg_modulo.usuario,
       v_str_archivo    STRING,
       v_canal          base.Channel,
       v_cadena         STRING

   LET v_str_archivo = p_ruta_rescate CLIPPED,"/",p_usuario CLIPPED,".",p_archivo_salida CLIPPED,".device"
   LET v_canal = base.Channel.create()
   CALL v_canal.openFile(v_str_archivo,"w")

   LET v_cadena = p_ruta_rescate CLIPPED,
                  '/SALDOS_',v_fcorte USING 'ddmmyyyy'
   CALL v_canal.writeLine('BEGIN OBJECT DEVICEARRAY '||p_archivo_salida CLIPPED||".device \n")
   CALL v_canal.writeLine('BEGIN SEQUENCE ')
   CALL v_canal.writeLine('TYPE           FILE ')
   CALL v_canal.writeLine('FILE           '||v_cadena)
   CALL v_canal.writeLine('TAPEBLOCKSIZE  0 ')
   CALL v_canal.writeLine('TAPEDEVICESIZE 0 ')
   CALL v_canal.writeLine('PIPECOMMAND      ')
   CALL v_canal.writeLine('END  SEQUENCE    \n')
   CALL v_canal.writeLine('END  OBJECT      ')

   CALL v_canal.close()

   CALL fn_crea_objeto(v_str_archivo, p_archivo_salida CLIPPED||".device", "device", "")
END FUNCTION


FUNCTION fn_genera_format(p_ruta_rescate, p_archivo_salida, p_usuario)

   DEFINE v_ch_format      base.Channel
   DEFINE p_ruta_rescate   STRING
   DEFINE p_usuario        STRING
   DEFINE p_archivo_salida STRING
   DEFINE v_archivo_format STRING

   LET v_archivo_format = p_ruta_rescate CLIPPED,"/",p_usuario CLIPPED,".",p_archivo_salida CLIPPED,".format"

   LET v_ch_format = base.Channel.create()
   CALL v_ch_format.openFile(v_archivo_format,"w")
   CALL v_ch_format.writeLine('BEGIN OBJECT FIXEDFORMAT '||p_archivo_salida CLIPPED||".format \n")
   CALL v_ch_format.writeLine('PROJECT       cbd')
   CALL v_ch_format.writeLine('CHARACTERSET  ASCII ')
   CALL v_ch_format.writeLine('MACHINE       Intel \n')
   
   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   nss')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       11')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      0')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   rfc')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       13')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      11')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   curp')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       18')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      24')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   ap_paterno_af')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       40')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      42')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   ap_materno_af')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       40')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      82')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   nombre_af')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       40')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      122')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   nombre_imss')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       50')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      162')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   tipo_trabajador')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      212')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   cve_afore')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       3')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      213')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   aport_viv97')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       10')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      216')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   num_aportaciones97')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       5')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      226')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_ssv97')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      231')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   aport_viv92')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       8')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      237')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   num_aportaciones92')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       5')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      245')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_ssv92')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      250')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   fondo_viv72')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       7')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      256')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_fondo_anterior')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      263')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   aivs_viv97')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       12')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      269')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   aivs_viv92')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       12')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      281')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   valor_paivs')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       12')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      293')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_paivs')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      305')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   marca_modif_nombre')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      311')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_unificacion')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      312')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   marca_unificacion')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      313')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_retiro')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      314')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   marca_retiro')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      315')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_traspaso_afore')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      316')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_devolucion_pagos')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      317')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_trans_acreditados')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      318')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   marca_trans_43bis')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      319')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_trabajador_credito')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      320')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   solicitud_credito')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      321')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_credito')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      322')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_aivs_retiro')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      328')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   f_ultimo_movimiento')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       6')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      334')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   diferencia_nombre')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      335')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_traspaso_sar92')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      336')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_acreditados_43pr')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      337')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_acreditados_43gt')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      338')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   estatus_acreditados_43su')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      339')
   CALL v_ch_format.writeLine('END SEQUENCE \n')

   CALL v_ch_format.writeLine('BEGIN SEQUENCE')
   CALL v_ch_format.writeLine('FIELDNAME   dummycr')
   CALL v_ch_format.writeLine('DATATYPE    Chars')
   CALL v_ch_format.writeLine('BYTES       1')
   CALL v_ch_format.writeLine('DECIMALS')
   CALL v_ch_format.writeLine('OFFSET      340')
   CALL v_ch_format.writeLine('END SEQUENCE \n')
   
   CALL v_ch_format.writeLine('END OBJECT')

   CALL v_ch_format.close()

   CALL fn_crea_objeto(v_archivo_format, p_archivo_salida CLIPPED||".format", "format", "cbd")

END FUNCTION

FUNCTION fn_genera_map(p_ruta_rescate, p_archivo_salida, p_usuario)
   DEFINE p_ruta_rescate   STRING
   DEFINE p_usuario        STRING
   DEFINE p_archivo_salida STRING
   DEFINE v_archivo_map    STRING
   DEFINE v_comando        STRING
   DEFINE v_ch_map         base.Channel

   LET v_archivo_map = p_ruta_rescate CLIPPED,"/",p_usuario CLIPPED,".",p_archivo_salida CLIPPED,".map"

   LET v_ch_map = base.Channel.create()
   CALL v_ch_map.openFile(v_archivo_map,"w")

   CALL v_ch_map.writeLine('BEGIN OBJECT UNLOADMAP '||p_archivo_salida CLIPPED||".map")

   CALL v_ch_map.writeLine('PROJECT      cbd')
   CALL v_ch_map.writeLine('FORMAT       '||p_archivo_salida CLIPPED||'.format')
   CALL v_ch_map.writeLine('DATABASE     safre_viv')
   CALL v_ch_map.writeLine('QUERY        '||p_archivo_salida CLIPPED||'.query')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      nss')
   CALL v_ch_map.writeLine('FIELDNAME       nss')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      rfc')
   CALL v_ch_map.writeLine('FIELDNAME       rfc')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      curp')
   CALL v_ch_map.writeLine('FIELDNAME       curp')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      ap_paterno_af')
   CALL v_ch_map.writeLine('FIELDNAME       ap_paterno_af')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      ap_materno_af')
   CALL v_ch_map.writeLine('FIELDNAME       ap_materno_af')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      nombre_af')
   CALL v_ch_map.writeLine('FIELDNAME       nombre_af')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      nombre_imss')
   CALL v_ch_map.writeLine('FIELDNAME       nombre_imss')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      tipo_trabajador')
   CALL v_ch_map.writeLine('FIELDNAME       tipo_trabajador')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      cve_afore')
   CALL v_ch_map.writeLine('FIELDNAME       cve_afore')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      aport_viv97')
   CALL v_ch_map.writeLine('FIELDNAME       aport_viv97')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER      ')
   CALL v_ch_map.writeLine('PICTURE            ')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      num_aportaciones97')
   CALL v_ch_map.writeLine('FIELDNAME       num_aportaciones97')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_ssv97')
   CALL v_ch_map.writeLine('FIELDNAME       f_ssv97')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      aport_viv92')
   CALL v_ch_map.writeLine('FIELDNAME       aport_viv92')
   CALL v_ch_map.writeLine('JUSTIFICATION   ')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER     ')
   CALL v_ch_map.writeLine('PICTURE           ')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      num_aportaciones92')
   CALL v_ch_map.writeLine('FIELDNAME       num_aportaciones92')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_ssv92')
   CALL v_ch_map.writeLine('FIELDNAME       f_ssv92')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      fondo_viv72')
   CALL v_ch_map.writeLine('FIELDNAME       fondo_viv72')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_fondo_anterior')
   CALL v_ch_map.writeLine('FIELDNAME       f_fondo_anterior')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      aivs_viv97')
   CALL v_ch_map.writeLine('FIELDNAME       aivs_viv97')
   CALL v_ch_map.writeLine('JUSTIFICATION   RIGHT')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER    0')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      aivs_viv92')
   CALL v_ch_map.writeLine('FIELDNAME       aivs_viv92')
   CALL v_ch_map.writeLine('JUSTIFICATION   RIGHT')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER    0')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      valor_paivs')
   CALL v_ch_map.writeLine('FIELDNAME       valor_paivs')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_paivs')
   CALL v_ch_map.writeLine('FIELDNAME       f_paivs')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      marca_modif_nombre')
   CALL v_ch_map.writeLine('FIELDNAME       marca_modif_nombre')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_unificacion')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_unificacion')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      marca_unificacion')
   CALL v_ch_map.writeLine('FIELDNAME       marca_unificacion')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_retiro')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_retiro')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      marca_retiro')
   CALL v_ch_map.writeLine('FIELDNAME       marca_retiro')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_traspaso_afore')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_traspaso_afore')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_devolucion_pagos')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_devolucion_pagos')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_trans_acreditados')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_trans_acreditados')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      marca_trans_43bis')
   CALL v_ch_map.writeLine('FIELDNAME       marca_trans_43bis')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_trabajador_credito')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_trabajador_credito')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      solicitud_credito')
   CALL v_ch_map.writeLine('FIELDNAME       solicitud_credito')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_credito')
   CALL v_ch_map.writeLine('FIELDNAME       f_credito')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_aivs_retiro')
   CALL v_ch_map.writeLine('FIELDNAME       f_aivs_retiro')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      f_ultimo_movimiento')
   CALL v_ch_map.writeLine('FIELDNAME       f_ultimo_movimiento')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      diferencia_nombre')
   CALL v_ch_map.writeLine('FIELDNAME       diferencia_nombre')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_traspaso_sar92')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_traspaso_sar92')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_acreditados_43pr')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_acreditados_43pr')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_acreditados_43gt')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_acreditados_43gt')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      estatus_acreditados_43su')
   CALL v_ch_map.writeLine('FIELDNAME       estatus_acreditados_43su')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('BEGIN SEQUENCE')
   CALL v_ch_map.writeLine('COLUMNNAME      dummycr')
   CALL v_ch_map.writeLine('FIELDNAME       dummycr')
   CALL v_ch_map.writeLine('JUSTIFICATION')
   CALL v_ch_map.writeLine('CASECONVERT')
   CALL v_ch_map.writeLine('DEFAULTVALUE')
   CALL v_ch_map.writeLine('TRANSFERBYTES')
   CALL v_ch_map.writeLine('COLUMNOFFSET')
   CALL v_ch_map.writeLine('FIELDOFFSET')
   CALL v_ch_map.writeLine('FIELDMINIMUM')
   CALL v_ch_map.writeLine('FIELDMAXIMUM')
   CALL v_ch_map.writeLine('FILLCHARACTER')
   CALL v_ch_map.writeLine('PICTURE')
   CALL v_ch_map.writeLine('FUNCTION')
   CALL v_ch_map.writeLine('STORAGECODING     BINARY')
   CALL v_ch_map.writeLine('BLOBCOLUMN')
   CALL v_ch_map.writeLine('END SEQUENCE \n')

   CALL v_ch_map.writeLine('END OBJECT')

   LET v_comando = "onpladm delete map ",p_archivo_salida CLIPPED||".map -fu -p cbd ",
                   " 1>/dev/null 2>/dev/null"
   RUN v_comando

   CALL fn_crea_objeto(v_archivo_map, p_archivo_salida CLIPPED||".map", "map", "cbd" )

END FUNCTION

FUNCTION fn_genera_query(p_ruta_rescate, p_archivo_salida, p_usuario)
   DEFINE p_ruta_rescate   STRING
   DEFINE p_usuario        STRING
   DEFINE p_archivo_salida STRING
   DEFINE v_archivo_query  STRING
   DEFINE v_query          STRING
   
   DEFINE v_ch_query       base.Channel

   DEFINE v_precio                              DECIMAL(12,6)
   DEFINE v_precio_paso                         DECIMAL(22,0)
   DEFINE v_precio_formato                      STRING

   SELECT precio_fondo
   INTO v_precio
   FROM glo_valor_fondo
   WHERE fondo = 11
   AND f_valuacion = v_fcorte

   LET v_precio_paso = v_precio * 1000000
   LET v_precio_formato = v_precio_paso USING "&&&&&&&&&&&&"

   LET v_archivo_query = p_ruta_rescate CLIPPED,"/",p_usuario CLIPPED,".",p_archivo_salida CLIPPED,".query"

   LET v_ch_query = base.Channel.create()
   CALL v_ch_query.openFile(v_archivo_query,"w")

   CALL v_ch_query.writeLine('BEGIN OBJECT QUERY   '||p_archivo_salida CLIPPED||".query")

   CALL v_ch_query.writeLine('PROJECT cbd')
   CALL v_ch_query.writeLine('DATABASE safre_viv')

   LET v_query ='"SELECT afi_derechohabiente.nss,',
                        "afi_derechohabiente.rfc,",
                        "afi_derechohabiente.curp,",
                        "afi_derechohabiente.ap_paterno_af,",
                        "afi_derechohabiente.ap_materno_af,",
                        "afi_derechohabiente.nombre_af,",
                        "afi_derechohabiente.nombre_imss,",
                        "NVL(cbd_detalle_bdnsviv.tipo_trabajador,0) tipo_trabajador,",
                        "NVL(cbd_detalle_bdnsviv.cve_afore,'000') cve_afore,",
                        "TO_CHAR(cbd_prepara_saldo.saldo_viv97*100,'&&&&&&&&') aport_viv97,",
                        "'00000' num_aportaciones97,",
                        "'",v_fcorte USING "YYMMDD","' f_ssv97,",
                        "TO_CHAR(cbd_prepara_saldo.saldo_viv92*100,'&&&&&&&&') aport_viv92,",
                        "'00000' num_aportaciones92,",
                        "'",v_fcorte USING "YYMMDD","' f_ssv92,",
                        "'0000000' fondo_viv72,",
                        "'      ' f_fondo_anterior,",
                        "TO_CHAR(cbd_prepara_saldo.aivs_97*1000000,'&&&&&&&&&&&&') aivs_viv97,",
                        "TO_CHAR(cbd_prepara_saldo.aivs_92*1000000,'&&&&&&&&&&&&') aivs_viv92,",
                        "'", v_precio_formato, "' valor_paivs,",
                        "'",v_fcorte USING "YYMMDD","' f_paivs,",
                        "'0' marca_modif_nombre,",
                        "NVL( cbd_detalle_bdnsviv.ind_unificacion,0) estatus_unificacion,",
                        "'0' marca_unificacion,",
                        "NVL(cbd_detalle_bdnsviv.ind_retiro,0) estatus_retiro,",
                        "'0' marca_retiro,",
                        "NVL(cbd_detalle_bdnsviv.ind_afore_afore,0) estatus_traspaso_afore,",
                        "NVL(cbd_detalle_bdnsviv.ind_dev_pagos,0) estatus_devolucion_pagos,",
                        "NVL(cbd_detalle_bdnsviv.ind_trans_acreditados,0) estatus_trans_acreditados,",
                        "NVL(cbd_detalle_bdnsviv.ind_credito_43bis,0) marca_trans_43bis,",
                        "NVL(cbd_detalle_bdnsviv.ind_credito_vivienda,0) estatus_trabajador_credito,",
                        "' ' solicitud_credito,",
                        "cbd_prepara_saldo.f_credito,",
                        "'000000' f_aivs_retiro,",
                        "'",v_fcorte USING "YYMMDD","' f_ultimo_movimiento,",
                        "NVL(cbd_detalle_bdnsviv.dif_afore_procanase,0) diferencia_nombre,",
                        "NVL(cbd_detalle_bdnsviv.ind_traspaso_9297,0) estatus_traspaso_sar92,",
                        "NVL(cbd_detalle_bdnsviv.ind_acr_43bis_prev,0) estatus_acreditados_43pr,",
                        "NVL(cbd_detalle_bdnsviv.ind_acr_43bis_gar,0) estatus_acreditados_43gt,",
                        "NVL(cbd_detalle_bdnsviv.ind_acr_43bis_sub,0) estatus_acreditados_43su,",
                        "'' dummycr ",
                  "FROM afi_derechohabiente, ",
                       "cbd_prepara_saldo, ",       
                       "OUTER cbd_detalle_bdnsviv ",
                 "WHERE afi_derechohabiente.nss = cbd_prepara_saldo.nss ",
                   "AND cbd_prepara_saldo.nss = cbd_detalle_bdnsviv.nss ",
                   'ORDER BY cbd_prepara_saldo.ind_imss DESC"' 

   CALL v_ch_query.writeLine('SELECTSTATEMENT '||v_query)
   CALL v_ch_query.writeLine('END OBJECT')

   CALL v_ch_query.close()

   CALL fn_crea_objeto(v_archivo_query, p_archivo_salida CLIPPED||".query", "query", "cbd")
END FUNCTION

FUNCTION fn_crea_objeto(p_str_archivo, p_objeto, p_tipo, p_proyecto)
   DEFINE p_tipo            STRING
   DEFINE p_objeto          STRING
   DEFINE p_str_archivo     STRING
   DEFINE p_proyecto        STRING
   DEFINE v_comando         STRING
   DEFINE r_ejecucion       SMALLINT

   #Se ejecuta primero el create y despues el modify, para no verificar si ya
   #existe el objeto

   CASE p_tipo
      WHEN "device"
         LET v_comando = "onpladm describe device ", p_objeto, " 1>/dev/null 2>/dev/null"
      WHEN "job" 
         LET v_comando = "onpladm describe job ", p_objeto,
                         " -fu -p ", p_proyecto , " 1>/dev/null 2>/dev/null"
      WHEN "format"
         LET v_comando = "onpladm describe format ", p_objeto,
                         " -p ",p_proyecto , " 1>/dev/null 2>/dev/null"
     WHEN "map"
         DISPLAY ""
         LET v_comando = "onpladm describe map ", p_objeto,
                         " -fu -p ",p_proyecto , " 1>/dev/null 2>/dev/null"

     WHEN "query"
         DISPLAY ""
         LET v_comando = "onpladm describe query ", p_objeto,
                         " -p ",p_proyecto , " 1>/dev/null 2>/dev/null"

   END CASE

   RUN v_comando RETURNING r_ejecucion

   IF r_ejecucion <> 0 THEN
      LET v_comando = "onpladm create object -F ",
                      p_str_archivo, " 1>/dev/null 2>/dev/null"
   ELSE
      LET v_comando = "onpladm modify object -F ",
                      p_str_archivo, " 1>/dev/null 2>/dev/null"
   END IF

   DISPLAY ""
   DISPLAY "CREA OBJETO HPL ", p_str_archivo
   DISPLAY ""
   RUN v_comando

END FUNCTION

#Objetivo: Recupera la informacion necesaria del proceso para cargar el archivo
FUNCTION fn_recupera_inf_proceso(p_proceso,p_operacion)
DEFINE p_proceso       LIKE cat_proceso.proceso_cod,
       p_operacion     LIKE cat_operacion.opera_cod,
       v_layout        LIKE cat_operacion.layout_cod,
       v_extension     LIKE cat_operacion.extension,
       v_modulo        LIKE cat_proceso.modulo_cod,
       v_proceso_desc  LIKE cat_proceso.proceso_desc,
       v_opera_desc    LIKE cat_operacion.opera_desc,
       v_ruta_rescate  LIKE seg_modulo.ruta_rescate,
       v_usuario       LIKE seg_modulo.usuario,
       v_ruta_listados LIKE seg_modulo.ruta_listados
       
   #Consulta que recupera el módulo y descripción del proceso
   SELECT modulo_cod, proceso_desc
     INTO v_modulo, v_proceso_desc
     FROM cat_proceso
    WHERE proceso_cod = p_proceso

   #Consulta que recupera los datos necesarios para conformar las tablas temporales del proceso
   SELECT extension, opera_desc, layout_cod
     INTO v_extension, v_opera_desc, v_layout
     FROM cat_operacion
    WHERE proceso_cod = p_proceso
      AND opera_cod   = p_operacion
      
   #Consulta que recupera el usuario y la ruta donde estan ubicados los archivos del proceso
   SELECT ruta_rescate, usuario
     INTO v_ruta_rescate, v_usuario
     FROM seg_modulo
    WHERE modulo_cod = v_modulo

   #Ruta donde se coloca el archivo de monitoreo
   SELECT ruta_listados
     INTO v_ruta_listados
     FROM seg_modulo
    WHERE modulo_cod = 'bat'
    --inicialización de variables para PRUEBAS UNITARIAS
    --LET v_ruta_rescate = "/ds/safreviv/glo/bin"
    --LET v_proceso_desc = "Descripción de proceso"
    --LET v_opera_desc = "Descripción de operacion"
    --LET v_usuario = "desa3"
    --LET v_extension = "F110912"
    --LET v_layout = 30604
    --LET v_layout = 4983

   RETURN v_proceso_desc, v_extension, v_opera_desc,
          v_layout, v_ruta_rescate, v_ruta_listados,  v_usuario
END FUNCTION

FUNCTION fn_genera_job(p_ruta_rescate,p_archivo_salida,p_usuario,p_modulo_cod)

DEFINE p_ruta_rescate   STRING,--LIKE seg_modulo.ruta_rescate,
       p_archivo_salida LIKE cat_layout.archivo,
       p_usuario        LIKE seg_modulo.usuario,
       p_modulo_cod     CHAR(3),
       v_str_archivo    STRING,
       v_canal          base.Channel

   LET v_str_archivo = p_ruta_rescate CLIPPED,"/",p_usuario CLIPPED,".",p_archivo_salida CLIPPED,".job"
   LET v_canal = base.Channel.create()
   CALL v_canal.openFile(v_str_archivo,"w")

   CALL v_canal.writeLine('BEGIN OBJECT UNLOADJOB '||p_archivo_salida CLIPPED||".job")
   CALL v_canal.writeLine('PROJECT           '||p_modulo_cod CLIPPED)
   CALL v_canal.writeLine('DEVICE            '||p_archivo_salida CLIPPED||'.device ')
   CALL v_canal.writeLine('MAP               '||p_archivo_salida CLIPPED||'.map ')
   CALL v_canal.writeLine('FILTER            ')
   CALL v_canal.writeLine('SERVER            vivop_tcp') 
   CALL v_canal.writeLine('DATABASE          safre_viv ')
   CALL v_canal.writeLine('REJECTFILE        '||
                           p_ruta_rescate CLIPPED||'/'||p_usuario CLIPPED||'.'||
                           p_archivo_salida CLIPPED||'.rjt ')
   CALL v_canal.writeLine('LOGFILE           '||
                           p_ruta_rescate CLIPPED||'/'||p_usuario CLIPPED||'.'||
                           p_archivo_salida CLIPPED||'.log ')
   CALL v_canal.writeLine('ISOLATIONLEVEL    DR ')
   CALL v_canal.writeLine('MAXERRORS         100 ')
   CALL v_canal.writeLine('END  OBJECT      \n')

   CALL v_canal.close()

   CALL fn_crea_objeto(v_str_archivo, p_archivo_salida CLIPPED||".job", "job", p_modulo_cod )
END FUNCTION

FUNCTION fn_ejecuta_hpl(p_ruta_rescate, p_archivo_salida,p_usuario,p_modulo_cod)

DEFINE p_ruta_rescate   STRING,
       p_modulo_cod     CHAR(3),
       p_archivo_salida LIKE cat_layout.archivo,
       p_usuario        LIKE seg_usuario.usuario_cod,
       v_comando        STRING,
       v_fecha          DATE,
       v_str_archivo    STRING,
       v_canal          base.Channel


   LET v_comando = "onpladm run job ", p_archivo_salida CLIPPED, ".job -fu -p ",
                    p_modulo_cod --, " 1>/dev/null 2>/dev/null"
   
   DISPLAY " INICIO ETAPA       : EJECUTA JOB CARGA HPL"
   LET v_fecha = TODAY
   DISPLAY " FECHA              : ",v_fecha USING "DD-MM-YYYY"
   DISPLAY " HORA               : ",TIME(CURRENT),"\n"
   DISPLAY ""
   #registra etapa en archivo de monitoreo

   RUN v_comando
   DISPLAY v_comando
   DISPLAY " FIN ETAPA          : EJECUTA JOB CARGA HPL"
   LET v_fecha = TODAY
   DISPLAY " FECHA              : ",v_fecha USING "DD-MM-YYYY"
   DISPLAY " HORA               : ",TIME(CURRENT),"\n"
   DISPLAY ""

{   LET v_str_archivo = p_ruta_rescate CLIPPED,"/", p_usuario CLIPPED,".comandosed.sh"
   LET v_canal = base.Channel.create()
   CALL v_canal.openFile(v_str_archivo,"w")
}
   LET v_comando = " sed 's//\\n/g' ",
                    p_ruta_rescate CLIPPED, '/SALDOS_',v_fcorte USING 'ddmmyyyy' ,
                   " > ",  p_ruta_rescate CLIPPED, '/SALDOS_',v_fcorte USING 'ddmmyyyy', ".saldos"
{   
   CALL v_canal.writeLine(v_comando)
   CALL v_canal.close()
}
--   LET v_comando = "chmod 775 ",v_str_archivo, ";",v_str_archivo
--   DISPLAY v_comando
   RUN v_comando

END FUNCTION

FUNCTION fn_crea_project(p_proyecto)
   DEFINE p_proyecto   STRING
   DEFINE v_comando    STRING
   DEFINE r_ejecucion  SMALLINT

   LET v_comando = "onpladm describe project ", p_proyecto, " 1>/dev/null 2>/dev/null"
   RUN v_comando RETURNING r_ejecucion

   IF r_ejecucion <> 0 THEN
      LET v_comando = "onpladm create project ",p_proyecto, " 1>/dev/null 2>/dev/null"
      DISPLAY "CREA PROYECTO HPL ",p_proyecto
      RUN v_comando
   END IF
   
END FUNCTION

