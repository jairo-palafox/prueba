#-------------------------------------------------------------------------------
# File: DocumentosDevolucionService.4gl
# GENERATED BY fglwsdl 141859
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------

IMPORT security
IMPORT com
IMPORT XML
IMPORT os


GLOBALS "RETWS11.inc"

MAIN
    DEFINE servicio     INTEGER
    DEFINE respuesta    INTEGER 
   
   CALL CreateDocumentosDevolucionService() RETURNING servicio

   CALL com.WebServiceEngine.Start()

   DISPLAY("The server is listening.")

   WHILE TRUE
      #
      # Procesa cada request, regresa un entero que representa el estatus del request
      # el parametro -1 representa un valor infinito de espera
      #
      LET respuesta = com.WebServiceEngine.ProcessServices(-1)
      CASE respuesta
         WHEN 0
         WHEN -1
            DISPLAY "Timeout reached."
         WHEN -2
            DISPLAY "Disconnected from application server."
            EXIT PROGRAM   # The Application server has closed the connection
         WHEN -3
            DISPLAY "Client Connection lost."
         WHEN -4
            DISPLAY "Server interrupted with Ctrl-C."
         WHEN -10
            DISPLAY "Internal server error."
     END CASE

     IF int_flag<>0 THEN
        LET int_flag=0
        EXIT WHILE
     END IF     
   END WHILE
END MAIN

#-------------------------------------------------------------------------------
# Service: DocumentosDevolucionService
# Port:    DocumentosDevolucion
#-------------------------------------------------------------------------------
#
# FUNCTION CreateDocumentosDevolucionService
#   RETURNING soapstatus
#
FUNCTION CreateDocumentosDevolucionService()
  DEFINE service      com.WebService
  DEFINE operation    com.WebOperation

  TRY
    # Create Web Service
    LET service = com.WebService.CreateWebService("DocumentosDevolucionService","http://documentos.service.saci.efp.com")
    CALL service.setFeature("Soap1.1",TRUE)

    # Handle HTTP register methods
    CALL service.registerInputHttpVariable(DocumentosDevolucionHttpIn)
    CALL service.registerOutputHttpVariable(DocumentosDevolucionHttpOut)


    #
    # Operation: registraDocumentos
    #

    # Publish Operation : registraDocumentos
    LET operation = com.WebOperation.CreateDOCStyle("registraDocumentos","registraDocumentos",registraDocumentos,registraDocumentosResponse)
    CALL service.publishOperation(operation,"")


    #
    # Register Service
    #
    CALL com.WebServiceEngine.RegisterService(service)
    RETURN 0

  CATCH
    RETURN STATUS
  END TRY

END FUNCTION

FUNCTION registraDocumentos()
   DEFINE v_query          STRING

   DEFINE v_nss            CHAR(11)

   DEFINE v_ruta_base      VARCHAR(100)
   DEFINE v_ruta_imagen    VARCHAR(100)
   DEFINE v_raiz_imagen    STRING
   DEFINE v_bandera        SMALLINT
   DEFINE v_id_sol         STRING
   DEFINE v_resultado      SMALLINT 
   DEFINE v_arch_adjunta   STRING
   DEFINE v_caso           CHAR(10)
   DEFINE v_caso_crm       CHAR(10) 
   DEFINE v_id_solicitud   DECIMAL(10,0)

   DATABASE safre_viv

   LET v_query = "SELECT nss FROM ret_documento_devolucion WHERE id_solicitud = ?"
   PREPARE exe_consulta_previa FROM v_query

   INITIALIZE v_nss TO NULL
   LET v_id_sol = registraDocumentos.documentosRequest.solicitud.idSolicitud
   LET v_caso_crm = registraDocumentos.documentosRequest.solicitud.idSolicitud
   LET v_nss = registraDocumentos.documentosRequest.trabajador.nss

   IF LENGTH(v_caso_crm) = 9 THEN 
      LET v_caso_crm = '0',v_caso_crm
   END IF 
   
   DISPLAY "Busca el id solicitud "
   DISPLAY "Id Solicitud ", v_id_sol
   DISPLAY "Caso CRM ", v_caso_crm
   SELECT id_solicitud
   INTO   v_id_solicitud
   FROM   ret_solicitud_generico 
--   WHERE  caso_adai = v_caso_crm
   WHERE  nss = v_nss
   AND    modalidad_retiro = 3
   AND    estado_solicitud = 10

   DISPLAY "El id solicitud encontrado ", v_id_solicitud
   
   INITIALIZE v_nss TO NULL
   EXECUTE exe_consulta_previa USING v_id_solicitud
                              INTO   v_nss
   IF v_nss IS NULL THEN
      #Se busca la ruta destino del zip:
      SELECT ruta_envio
      INTO v_ruta_base
      FROM seg_modulo      
      WHERE modulo_cod = 'ret'

      TRY
         DISPLAY "en el TRY"
         LET v_raiz_imagen = v_ruta_base CLIPPED , "/doc_dev"
         IF NOT os.Path.isDirectory(v_raiz_imagen.trim()) THEN
           CALL os.Path.mkdir(v_raiz_imagen.trim()) RETURNING v_bandera
         END IF

         LET v_raiz_imagen = v_raiz_imagen.trim(),"/",registraDocumentos.documentosRequest.trabajador.nss CLIPPED
         IF NOT os.Path.isDirectory(v_raiz_imagen.trim()) THEN
           CALL os.Path.mkdir(v_raiz_imagen.trim()) RETURNING v_bandera
         END IF

         LET v_raiz_imagen = v_raiz_imagen.trim(),"/DEV_SSV_", registraDocumentos.documentosRequest.trabajador.nss CLIPPED, "_ID_", v_id_sol.trim(), ".zip"
         LET v_ruta_imagen = v_raiz_imagen.trim()
         DISPLAY "Guardo el archivo en el SO"
         CALL security.Base64.SaveBinary(v_raiz_imagen,registraDocumentos.documentosRequest.solicitud.zipB64)
         
         CALL security.Base64.LoadBinary(v_raiz_imagen) RETURNING v_arch_adjunta

         DISPLAY "Cargo el Archivo en memoria"

         LET v_query = 'INSERT INTO ret_documento_devolucion (id_solicitud,nss,curp,curp_empleado,correo_trabajador,correo_empleado,usuario,documentos) VALUES (?,?,?,?,?,?,?,?)'
         DISPLAY "Insert ", v_query
         DISPLAY "Valores "
         DISPLAY "Id Solicitud      <", v_id_solicitud, ">"
         DISPLAY "NSS               <", registraDocumentos.documentosRequest.trabajador.nss, ">"
         DISPLAY "CURP Trabajador   <", registraDocumentos.documentosRequest.trabajador.curp, ">"
         DISPLAY "CURP Empleado     <", registraDocumentos.documentosRequest.empleado.curp, ">"
         DISPLAY "Trabajador Correo <", registraDocumentos.documentosRequest.trabajador.correo, ">"
         DISPLAY "Empleado Correo   <", registraDocumentos.documentosRequest.empleado.correo, ">"
         DISPLAY "Empleado Usuario  <", registraDocumentos.documentosRequest.empleado.usuario, ">"
         DISPLAY "Ruta Imagen       <", v_ruta_imagen, ">"
         PREPARE exe_inserta_documento FROM v_query
         DISPLAY "El query posterior al prepare", v_query
         EXECUTE exe_inserta_documento USING v_id_Solicitud,
                                             registraDocumentos.documentosRequest.trabajador.nss,
                                             registraDocumentos.documentosRequest.trabajador.curp,
                                             registraDocumentos.documentosRequest.empleado.curp,
                                             registraDocumentos.documentosRequest.trabajador.correo,
                                             registraDocumentos.documentosRequest.empleado.correo,
                                             registraDocumentos.documentosRequest.empleado.usuario,
                                             v_ruta_imagen
         LET registraDocumentosResponse.registraDocumentosReturn.codRespuesta = '001'
         LET registraDocumentosResponse.registraDocumentosReturn.descRechazo = 'Documentos almacenados correctamente'
         DISPLAY "En el llamado al adjunta documentos en CRM"
         CALL fn_adjunta_documento("Archivozip.zip",v_arch_adjunta,v_id_solicitud) RETURNING v_resultado, v_caso
         DISPLAY "Se adjunto información en CRM"
         --CALL fn_actualiza_estado(v_caso_crm, registraDocumentos.documentosRequest.trabajador.nss)  RETURNING v_resultado
      CATCH
         LET registraDocumentosResponse.registraDocumentosReturn.codRespuesta = '002'
         LET registraDocumentosResponse.registraDocumentosReturn.descRechazo = 'Error al intentar guardar el ZIP en el servidor'
         DISPLAY "ERROR: ",SQLCA.SQLERRM
      END TRY
   ELSE
      LET registraDocumentosResponse.registraDocumentosReturn.codRespuesta = '002'
      LET registraDocumentosResponse.registraDocumentosReturn.descRechazo =   'Los documentos para el id_solicitud ',
                                                                              v_id_sol.trim(),
                                                                              ' ya se encuentran registrado en el sistema'
   END IF
END FUNCTION

FUNCTION fn_adjunta_documento(p_nombre_archivo, p_archivo, p_id_solicitud)
DEFINE p_archivo        STRING 
DEFINE p_nombre_archivo STRING 
DEFINE p_id_solicitud   DECIMAL(10,0)
DEFINE v_caso           CHAR(10)
DEFINE v_nss            CHAR(11)
DEFINE v_regreso        SMALLINT 
DEFINE v_codigo         INTEGER 

   DEFINE arr_documentos RECORD
         nombre_documento STRING, 
         documento        STRING 
   END RECORD 

   -- Busca el caso CRM
   SELECT caso_adai
   INTO   v_caso
   FROM   ret_solicitud_generico 
   WHERE  id_solicitud = p_id_solicitud
  
   LET v_regreso = 0
   LET arr_documentos.nombre_documento = p_nombre_archivo
   LET arr_documentos.documento        = p_archivo
   CALL fn_adjunta_docto_crm(v_caso, arr_documentos.*) RETURNING v_regreso, v_codigo
   DISPLAY "Adjunta documentos del caso: ",v_caso
   DISPLAY "            de la Solicitud: ", p_id_solicitud
   IF v_regreso = 0 THEN 
      DISPLAY "Documento enviado a CRM exitosamente"
   ELSE 
      DISPLAY "Problemas al invocar el servicio de Adjunta Dcoumentos :", v_regreso
   END IF 

RETURN v_regreso, v_caso

END FUNCTION

FUNCTION fn_actualiza_estado(p_caso, p_nss)
DEFINE p_caso           CHAR(10)
DEFINE p_nss            CHAR(11)
DEFINE v_regreso        SMALLINT 
DEFINE v_codigo         INTEGER 

   LET v_regreso = 0
   DISPLAY "Actualiza el estado del Caso : ", p_caso
   DISPLAY "                     del NSS : ", p_nss
   CALL fn_actualiza_estado_crm(p_caso, p_nss) RETURNING v_regreso, v_codigo
   DISPLAY "El resultado : ", v_regreso
   DISPLAY "   código    : ", v_codigo

   IF v_regreso = 0 THEN 
      DISPLAY "Estado Actualizado en CRM exitosamente"
   ELSE 
      DISPLAY "Problemas al invocar el servicio de Actualización del Estado en CRM :", v_regreso
   END IF 

RETURN v_regreso

END FUNCTION
