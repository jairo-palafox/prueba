#-------------------------------------------------------------------------------
# File: RetiroDisponibilidadLey73Service.4gl
# GENERATED BY fglwsdl 141859
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT com
IMPORT xml

DATABASE safre_viv 
GLOBALS "RETWS07.inc"
GLOBALS "RETG01.4gl"



#-------------------------------------------------------------------------------
# Service: retiroDisponibilidadLey73
# Port:    retiroDisponibilidadLey73PortType
#-------------------------------------------------------------------------------
#
# FUNCTION CreateretiroDisponibilidadLey73Service
#   RETURNING soapstatus
#
FUNCTION CreateretiroDisponibilidadLey73Service()
  DEFINE service      com.WebService
  DEFINE operation    com.WebOperation

  TRY
    # Create Web Service
    LET service = com.WebService.CreateWebService("retiroDisponibilidadLey73","http://www.infonavit.gob.mx/")
    CALL service.setFeature("Soap1.1",TRUE)

    # Handle HTTP register methods
    CALL service.registerInputHttpVariable(RetiroDisponibilidadLey73HttpIn)
    CALL service.registerOutputHttpVariable(retiroDisponibilidadLey73HttpOut)


    #
    # Operation: fn_ret_saldos_disponibles_ley73
    #

    # Publish Operation : fn_ret_saldos_disponibles_ley73
    LET operation = com.WebOperation.CreateDOCStyle("fn_ret_saldos_disponibles_ley73",
                                                    "fn_ret_saldos_disponibles_ley73",
                                                    fn_ret_saldos_disponibles_ley73Request,
                                                    fn_ret_saldos_disponibles_ley73Response)
                                                    
    CALL service.publishOperation(operation,"fn_ret_saldos_disponibles_ley73")


    #
    # Register Service
    #
    CALL com.WebServiceEngine.RegisterService(service)
    RETURN 0

  CATCH
    RETURN STATUS
  END TRY

END FUNCTION

{
======================================================================
Clave: 
Nombre: fn_ret_saldos_disponibles_ley73
Fecha creacion: Marzo 22, 2013
Autor: Ivan Vega, EFP
Narrativa del proceso que realiza:
Funcion principal del WS que consulta los saldos disponibles para retiros

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio

======================================================================
}
FUNCTION fn_ret_saldos_disponibles_ley73()
   DEFINE v_indice_retiro   SMALLINT,
          v_nss             LIKE afi_fondo72.nss,
          v_grupo           SMALLINT,
          v_medio_entrega   SMALLINT,
          v_ruta_ejecutable LIKE seg_modulo.ruta_bin,
          v_ruta_log        STRING,
          v_cadena          STRING

   -- se responde el servicio para pruebas
   LET fn_ret_saldos_disponibles_ley73Response.nss = fn_ret_saldos_disponibles_ley73Request.nss

   LET v_nss           = fn_ret_saldos_disponibles_ley73Request.nss
   LET v_grupo         = fn_ret_saldos_disponibles_ley73Request.grupo_ley73
   LET v_medio_entrega = fn_ret_saldos_disponibles_ley73Request.medio_entrega


   DISPLAY "Parámetros recibidos:"
   DISPLAY "NSS          : ", v_nss
   DISPLAY "GRUPO        : ", v_grupo
   DISPLAY "MEDIO ENTREGA: ", v_medio_entrega

   -- se obtiene la ruta ejecutable
   SELECT ruta_bin
   INTO   v_ruta_ejecutable
   FROM   seg_modulo
   WHERE  modulo_cod = "ret"

   -- se define la ruta del log
   LET v_ruta_log = v_ruta_ejecutable CLIPPED, "/RETWS07."
   LET v_cadena   = v_nss
   LET v_ruta_log = v_ruta_log || v_cadena || ".log"

   DISPLAY "Ruta del log creada del servidor: ", v_ruta_log

   -- se inicia el log del programa
   CALL STARTLOG(v_ruta_log)

   -- se inicia el indice del retiro que se va a consultar
   LET g_indice_retiro = 1
   IF v_nss IS NULL AND v_grupo IS NULL AND v_medio_entrega IS  NULL THEN 
      DISPLAY "Faltan parámetros "
   ELSE 
      -- se verifica si se validara retiro Ley 73
      IF ( (v_grupo IS NOT NULL) AND (v_grupo <> 0) ) THEN
         DISPLAY "Validando Ley 73"
         IF v_grupo <> 1 AND v_medio_entrega = 1 THEN 
            DISPLAY "El tipo de retiro para el grupo ", v_grupo, " no se puede realizar por medio de la tableta"
         ELSE 
            CALL fn_ret_disponibilidad_ley73(v_nss, v_grupo, v_medio_entrega, TRUE)
         END IF 
      END IF
   END IF 
END FUNCTION

{
======================================================================
Clave: 
Nombre: fn_ret_disponibilidad_ley73
Fecha creacion: Noviembre 28, 2017
Autor: Ricardo Pérez, EFP
Narrativa del proceso que realiza:
Verifica si un derechohabiente puede realizar el retiro de su saldo de cuenta
de vivienda segun ley 73

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio
======================================================================
}
FUNCTION fn_ret_disponibilidad_ley73(p_nss, p_grupo, p_medio_entrega, p_es_consulta)
   DEFINE p_nss                  CHAR(11), -- NSS
          p_grupo                SMALLINT, -- Grupo Ley 73 1, 2, 3 o 4 para tableta solo puede ser 1
          p_medio_entrega        SMALLINT, -- Medio por el cual entro la petición 1 - Tablta, 0 - Otros
          p_es_consulta          SMALLINT, -- booleana que indica si es una consulta o inicio de tramite
          v_tiene_spess          SMALLINT, -- booleana que indica si tiene una resolucion en SPESS
          v_id_datamart          LIKE ret_datamart.id_datamart,
          v_aivs_viv92           DECIMAL(24,6), -- saldo AIVs de viv92
          v_aivs_viv97           DECIMAL(24,6), -- saldo AIVs de viv97
          v_aivs_vol             DECIMAL(24,6), -- saldo AIVs de Aportaciones voluntarias
          v_pesos_viv92          DECIMAL(22,2), -- saldo pesos de viv92
          v_pesos_viv97          DECIMAL(22,2), -- saldo pesos de viv97
          v_pesos_vol            DECIMAL(22,2), -- saldo pesos de Aportaciones voluntarias
          v_resultado            SMALLINT, -- resultado de la consulta
          v_f_inicio_pension     DATE, -- fecha de inicio de pension en el SPESS
          v_f_resolucion         DATE, -- fecha de resolucion para validacion en grupo 1
          v_tpo_pension          CHAR(2), -- Tipo de pension de la resolucion
          v_tpo_prestacion       CHAR(2), -- Tipo de prestacion de la resolucion
          v_tpo_seguro           CHAR(2), -- Tipo de seguro de la resolucion
          v_regimen              SMALLINT,  -- Regimen de la Resolucion (97,73)
          v_porcentaje_valuacion SMALLINT,  -- Porcentaje de Valuación de la Resolución
          v_cant_matriz_derechos SMALLINT,  -- Contador para las ocurrencias de registros en la matriz de derechos
          v_id_derechohabiente   LIKE afi_derechohabiente.id_derechohabiente,
          v_tiene_cta_clabe      SMALLINT,  -- Indica si el NSS no tiene Cuenta CLABE y por eso se debe regresar el codigo de error especifico 
          v_nss                  CHAR(11),  -- NSS a ser buscado para la cuenta CLABE en caso de que la solicitud este en proceso
          v_n_referencia         LIKE sfr_marca_activa.n_referencia, -- para validar marca
          v_saldo_total          DECIMAL(24,6), -- saldo total (viv92 + viv97)
          v_sdo_tot_aivs         DECIMAL(24,6),  -- saldo total para respuesta aivs (viv92 + viv97)
          v_sdo_tot_pesos        DECIMAL(22,2),  -- saldo total para respuesta pesos (viv92 + viv97)
          v_diagnostico          SMALLINT,       --diagnostico de la consulta del saldo en la afore
          v_estatus              SMALLINT,        -- estatus de la cuenta individual segun la consulta del saldo en la Afore
          v_id_cliente           SMALLINT,        -- Indica que como se le habla al servicio de consulta de saldo de la Afore 30 - Consulta, 44 - Consulta y marca y 60 - consulta y desmarca
          v_tiene_rch_siaff      SMALLINT        -- Nos indica si tiene rechazo por siaff para las solicitudes de ley73 grupo 4

   -- se obtiene el id_derechohabiente
   SELECT id_derechohabiente
   INTO   v_id_derechohabiente
   FROM   afi_derechohabiente
   WHERE  nss               = p_nss
   AND    ind_estado_cuenta = 0
    
   LET v_aivs_viv92         = 0
   LET v_aivs_viv97         = 0
   LET v_aivs_vol           = 0
   LET v_pesos_viv92        = 0
   LET v_pesos_viv97        = 0
   LET v_pesos_vol          = 0
   LET v_id_cliente         = 30

   -- si no se encontro
   IF ( v_id_derechohabiente IS NULL ) THEN
      CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_nss_rfc_no_existe, 8, 0, TODAY,0)
      CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_nss_rfc_no_existe, 4, 0, TODAY,0)
      CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_nss_rfc_no_existe, 12,0, TODAY,0)

   ELSE
      -- se verifica si el NSS esta marcado de retiro ley73
      SELECT n_referencia
      INTO   v_n_referencia
      FROM   sfr_marca_activa
      WHERE  id_derechohabiente = v_id_derechohabiente
      AND    marca IN (803)

      -- si se encontro
      IF ( v_n_referencia IS NOT NULL ) THEN
         CALL ERRORLOG("ID marcado con 803 referencia: " || v_n_referencia)
         --*********   Se busca para grupo 4 si tiene una solicitud en tramite que esté pendiente por envia SIAFF por no tener cuenta CLABE o 
         --*********   por tener un rechazo por el banco
         --*********   ret_cuenta_clabe se busca por nss
         --*********
         IF p_grupo = 4 THEN 
            -- Primero valida si no tiene un rechazo por Banco
            LET v_tiene_rch_siaff = 0;

            SELECT COUNT(*)
            INTO v_tiene_rch_siaff
            FROM   ret_solicitud_generico rg,
                   ret_ley73_generico     rl
            WHERE  rg.id_solicitud     = rl.id_solicitud
            AND    rg.nss              = p_nss
            AND    rg.estado_solicitud in (90, 209, 210, 211, 213, 214)
            AND    rg.cod_rechazo      = 66
            AND    rg.modalidad_retiro = 3
            AND    rl.gpo_ley73        = 4;

            IF v_tiene_rch_siaff > 0 THEN 
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_rechazo_banco_siaff, 8, 0, TODAY,0)
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_rechazo_banco_siaff, 4, 0, TODAY,0)
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_rechazo_banco_siaff, 12, 0, TODAY,0)
            ELSE 
               SELECT COUNT(*)
               INTO   v_tiene_cta_clabe
               FROM   ret_solicitud_generico rg,
                      ret_ley73_generico     rlg
               WHERE  rg.id_solicitud       = v_n_referencia
               AND    rg.estado_solicitud   IN (60)
               AND    rg.id_solicitud       = rlg.id_solicitud
               AND    rg.modalidad_retiro   = 3
               AND    rlg.gpo_ley73         = 4

               IF v_tiene_cta_clabe > 0 THEN 
                  LET v_tiene_cta_clabe = 0

                  SELECT COUNT(*) -- si devuelve 0 es que no se ha recibido archivo con la cuenta clabe para el nss, si devuelve algo mayor a cero si se cuenta con clabe y esta próximo a enviarse
                  INTO v_tiene_cta_clabe
                  FROM   ret_solicitud_generico rg,
                         ret_ley73_generico     rlg,
                         ret_cuenta_clabe       rc
                  WHERE  rg.id_solicitud       = v_n_referencia
                  AND    rg.estado_solicitud   IN (60)
                  AND    rg.id_solicitud       = rlg.id_solicitud
                  AND    rg.modalidad_retiro   = 3
                  AND    rlg.gpo_ley73         = 4
                  AND    rc.nss                = rg.nss

                  IF v_tiene_cta_clabe = 0 THEN 
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pendiente_envio_clabe, 8, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pendiente_envio_clabe, 4, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pendiente_envio_clabe, 12,0, TODAY,0)
                  ELSE 
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 8, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 4, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 12,0, TODAY,0)
                  END IF 
               ELSE 
                  -- se encuentra marcado ya y no esta disponible el fondo
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 8, 0, TODAY,0)
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 4, 0, TODAY,0)
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 12,0, TODAY,0)
               END IF 
            END IF 
         ELSE 
            -- se encuentra marcado ya y no esta disponible el fondo
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 8, 0, TODAY,0)
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 4, 0, TODAY,0)
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_solicitud_en_tramite, 12,0, TODAY,0)
         END IF 
      ELSE      
         -- se verifica si el NSS tiene resolucion valida en el SPESS
         CALL fn_trabajador_resolucion_spess(p_nss, 5)
               RETURNING v_tiene_spess, v_id_datamart

         -- si no tiene resolucion valida en el spess
         IF ( NOT v_tiene_spess ) THEN
            -- se rechaza en viv92 y viv97
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_resolucion_spess, 8, 0, TODAY,0)
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_resolucion_spess, 4, 0, TODAY,0)
            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_resolucion_spess, 12,0, TODAY,0)
         ELSE
            -- se obtiene la fecha de resolucion de pension
            SELECT f_inicio_pension,
                   f_resolucion,
                   regimen,
                   tpo_prestacion,
                   tpo_seguro,
                   tpo_pension,
                   porcentaje_valuacion
            INTO   v_f_inicio_pension,
                   v_f_resolucion,
                   v_regimen,
                   v_tpo_prestacion,
                   v_tpo_seguro,
                   v_tpo_pension,
                   v_porcentaje_valuacion
            FROM   ret_datamart
            WHERE  id_datamart = v_id_datamart

            IF v_regimen = 97 THEN
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_regimen_diferente_73, 8, 0, TODAY,0)
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_regimen_diferente_73, 4, 0, TODAY,0)
               CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_regimen_diferente_73, 12,0, TODAY,0)
            ELSE 
               IF v_tpo_prestacion = "03" THEN 
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_resolucion_neg_pension, 8, 0, TODAY,0)
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_resolucion_neg_pension, 4, 0, TODAY,0)
                  CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_resolucion_neg_pension, 12,0, TODAY,0)
               ELSE
                  IF v_tpo_seguro = "RT" AND v_tpo_pension = "IP" AND v_tpo_prestacion = "00" AND  v_porcentaje_valuacion < 50 THEN 
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_porcentaje_menor_50, 8, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_porcentaje_menor_50, 4, 0, TODAY,0)
                     CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_porcentaje_menor_50, 12,0, TODAY,0)
                  ELSE 
                        
                     -- Busca la combinación en la matriz de derechos, si no la encuentra regresa codigo 91
                     SELECT COUNT(*)
                     INTO   v_cant_matriz_derechos
                     FROM   ret_matriz_derecho
                     WHERE  tpo_prestacion = v_tpo_prestacion
                     AND    tpo_seguro = v_tpo_seguro
                     AND    tpo_pension = v_tpo_pension
                     AND    regimen = v_regimen
                     AND    tpo_retiro = 'E'

                     IF v_cant_matriz_derechos = 0 THEN 
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_pension_vigente, 8, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_pension_vigente, 4, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_pension_vigente, 12,0, TODAY,0)
                     ELSE 
                        -- se obtiene el saldo de vivienda 92 y vivienda 97
                        -- se obtiene el saldo de viv92
                        -- 11mar2014. Grupos 2 y 3 no pagan vivienda 92
                        IF ( p_grupo = 2 OR p_grupo = 3 ) THEN
                           LET v_resultado   = 0
                           LET v_aivs_viv92  = 0
                           LET v_pesos_viv92 = 0
                        ELSE
                           -- se calcula el saldo
                           CALL fn_calcula_saldo_ley73(p_nss, 8, TODAY) 
                                RETURNING v_resultado,
                                     v_aivs_viv92,
                                     v_pesos_viv92
                        END IF
                            
                        -- se obtiene el saldo de viv97
                        CALL fn_calcula_saldo_ley73(p_nss, 4, TODAY)
                             RETURNING v_resultado,
                                    v_aivs_viv97,
                                    v_pesos_viv97

                        -- se integra el saldo de la subcuenta de aportaciones voluntarias.
                        CALL fn_calcula_saldo_ley73(p_nss, 55, TODAY)
                             RETURNING v_resultado,
                                    v_aivs_vol,
                                    v_pesos_vol

                        LET v_sdo_tot_aivs  = 0
                        LET v_sdo_tot_pesos = 0
                        LET v_sdo_tot_aivs  = v_aivs_viv92 + v_aivs_viv97 + v_aivs_vol
                        LET v_sdo_tot_pesos = v_pesos_viv92 + v_pesos_viv92 + v_pesos_vol

                        -- se verifica que grupo de retiro llego
                        CASE p_grupo
                           -- GRUPO 1
                           WHEN 1
                              -- si la fecha de inicio de pension es igual o posterior al 13 de enero de 2012
                              IF ( v_f_resolucion >= "01/13/2012" ) THEN
                                 --- miguel
                                 CALL fn_retl73_valida_grupo1(p_nss, p_medio_entrega, v_aivs_viv92, v_aivs_viv97 + v_aivs_vol, v_f_resolucion, p_es_consulta)
                              ELSE
                                 -- la fecha es invalida para grupo 1
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_resolucion_invalida_l73, 8, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_resolucion_invalida_l73, 4, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_resolucion_invalida_l73, 12,0, TODAY,0)
                              END IF

                           -- GRUPO 2
                           WHEN 2
                              -- si la fecha de inicio de pension es anterior al 13 de enero de 2012
                              IF ( v_f_inicio_pension < "01/13/2012" ) THEN
                                 -- se valida la solicitud para un grupo 2
                                 CALL fn_retl73_valida_grupo_2_y_3(p_nss, v_aivs_viv92, v_aivs_viv97 + v_aivs_vol, v_f_inicio_pension, p_es_consulta)
                              ELSE
                                 -- la fecha es invalida para grupo 2
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 8, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 4, 0, TODAY,0)            
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 12,0, TODAY,0)
                              END IF

                           -- GRUPO 3
                           WHEN 3
                              -- si la fecha de inicio de pension es anterior al 13 de enero de 2012
                              IF ( v_f_inicio_pension < "01/13/2012" ) THEN
                                 -- se valida la solicitud para un grupo 3
                                 CALL fn_retl73_valida_grupo_2_y_3(p_nss, v_aivs_viv92, v_aivs_viv97 + v_aivs_vol, v_f_inicio_pension, p_es_consulta)
                              ELSE
                                 -- la fecha es invalida para grupo 3
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 8, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 4, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 12,0, TODAY,0)            
                              END IF

                           -- GRUPO 4
                           WHEN 4
                              -- si la fecha de inicio de pension es anterior al 13 de enero de 2012
                              IF ( v_f_inicio_pension < "01/13/2012" ) THEN
                                 -- se valida la solicitud para un grupo 4
                                 CALL fn_retl73_valida_grupo4(p_nss, v_aivs_viv92, v_aivs_viv97 + v_aivs_vol, v_f_inicio_pension, p_es_consulta)
                              ELSE
                                 -- la fecha es invalida para grupo 4
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 8, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 4, 0, TODAY,0)
                                 CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fecha_inicio_pension_invalida_l73, 12,0, TODAY,0)
                              END IF
                         
                           -- otro grupo es invalido
                           OTHERWISE
                              -- se rechaza viv92 y viv97
                              CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_causal_retiro_invalido, 8, 0, TODAY,0)
                              CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_causal_retiro_invalido, 4, 0, TODAY,0)
                              CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_causal_retiro_invalido, 12,0, TODAY,0) 
                        END CASE
                     END IF 
                  END IF 
               END IF
            END IF 
         END IF
      END IF
   END IF

END FUNCTION


{
======================================================================
Clave: 
Nombre: fn_respuesta_ws_ley73
Fecha creacion: Marzo 22, 2013
Autor: Ivan Vega, EFP
Narrativa del proceso que realiza:
Construye la respuesta de la validacion de disponibilidad del retiro 
de ley 73

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio

======================================================================
}
FUNCTION fn_respuesta_ws_ley73(p_estado_solicitud, p_cod_rechazo, p_subcuenta, p_importe_aivs, p_fecha_valuacion,p_importe_tesofe)
DEFINE   p_estado_solicitud SMALLINT, -- Resp. de la solicidut, aceptada-rechazada
         p_cod_rechazo      SMALLINT, -- Codigo de rechazo 
         p_subcuenta        SMALLINT, -- subcuenta de inversion
         p_importe_aivs     DECIMAL(24,6), -- monto en AIVS
         p_fecha_valuacion  DATE, -- fecha de valuacion
         p_importe_tesofe   DECIMAL(24,2), -- monto en AIVs
         v_valor_fondo      LIKE glo_valor_fondo.precio_fondo,
         v_devolver_saldo   SMALLINT, -- booleana que indica si se debe devolver el saldo
         v_des_rechazo      CHAR(100) 
         
    -- se obtiene el valor de la accion
    SELECT precio_fondo
    INTO   v_valor_fondo
    FROM   glo_valor_fondo
    WHERE  f_valuacion = p_fecha_valuacion
    AND    fondo = 11

    LET v_devolver_saldo = TRUE 
    -- se verifica si se debe devolver el saldo de esta subcuenta
    IF p_subcuenta = 12 THEN 
        LET v_devolver_saldo = TRUE
    ELSE 
        LET v_devolver_saldo = fn_buscar_disponibilidad_retiro(3, p_subcuenta)
    END IF 

    -- si no se debe devolver, entonces se cambia el resultado por no disponible
    IF ( NOT v_devolver_saldo ) THEN
        LET p_estado_solicitud = gi_solicitud_rechazada
        LET p_cod_rechazo      = gi_no_disponible_para_retiro
    END IF
    LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = " "; 
    IF p_cod_rechazo <> 0 THEN
        -- Busca la descripcion del error para regresarla en la consulta
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = "";
        LET v_des_rechazo = "";
        SELECT des_larga
        INTO   v_des_rechazo
        FROM   ret_rechazo_generico
        WHERE  cod_rechazo = p_cod_rechazo;
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo =  v_des_rechazo;
        IF fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo IS NULL THEN
            LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = " "; 
        END IF
    END IF 

    LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].pago_dap      = 2
         
    -- si no se encuentra el precio del fondo, no se puede valuar
    IF ( v_valor_fondo IS NULL ) THEN
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].modalidad_retiro = 3 -- ley 73
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].subcuenta        = p_subcuenta
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].estado_solicitud = gi_solicitud_rechazada
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].cod_rechazo      = gi_no_hay_precio_fondo -- no existe precio de fondo para valuar
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].f_valuacion      = p_fecha_valuacion USING "YYYYMMDD"
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].monto_avis       = 0
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].monto_pesos      = 0

        -- se incrementa el indice del retiro consultado
        LET g_indice_retiro = g_indice_retiro + 1

    ELSE
   
        -- se verifica si el importe es 0 se rechaza sin saldo
        --IF ( p_importe_aivs = 0 ) THEN
        --  LET p_estado_solicitud = gi_solicitud_rechazada
        --  LET p_cod_rechazo      = gi_sin_saldo
        --END IF

        -- MARZ0 2015 ICHP

        IF p_estado_solicitud <> gi_solicitud_rechazada THEN 

            IF ( p_importe_aivs = 0 ) THEN

                LET p_estado_solicitud = gi_solicitud_rechazada
                LET p_cod_rechazo      = gi_sin_saldo
                LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = " "; 
                IF p_cod_rechazo <> 0 THEN
                    -- Busca la descripcion del error para regresarla en la consulta
                    LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = "";
                    LET v_des_rechazo = "";
                    SELECT des_larga
                    INTO   v_des_rechazo
                    FROM   ret_rechazo_generico
                    WHERE  cod_rechazo = p_cod_rechazo;
                    LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = v_des_rechazo;
                    IF fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo IS NULL THEN
                        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].des_rechazo = " "; 
                    END IF
                END IF 
            END IF 

        END IF 
      
        -- MARZ0 2015 ICHP

        -- se genera el registro de disponibilidad      
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].subcuenta        = p_subcuenta
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].estado_solicitud = p_estado_solicitud
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].cod_rechazo      = p_cod_rechazo
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].f_valuacion      = p_fecha_valuacion USING "YYYYMMDD"
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].monto_avis       = p_importe_aivs
        LET fn_ret_saldos_disponibles_ley73Response.saldo_x_retiro.element[g_indice_retiro].monto_pesos      = ((p_importe_aivs - p_importe_tesofe) * v_valor_fondo) + p_importe_tesofe
        -- se incrementa el indice del retiro consultado
        LET g_indice_retiro = g_indice_retiro + 1
    END IF
END FUNCTION

{
======================================================================
Clave: 
Nombre: fn_retl73_valida_grupo1
Fecha creacion: Noviembre 28, 2017
Autor: Ricardo Pérez, EFP
Narrativa del proceso que realiza:
Verifica si un derechohabiente puede realizar el retiro de su saldo de cuenta
de un credito por amortaciones excedentes

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio

======================================================================
}
FUNCTION fn_retl73_valida_grupo1(p_nss, p_medio_entrega, v_aivs_viv92, v_aivs_viv97, v_fecha_resolucion, p_es_consulta)
DEFINE p_nss              CHAR(11), -- NSS
       p_medio_entrega    SMALLINT, -- Medio por el cual llego la petición del Saldo
       p_grupo_ley73      SMALLINT, -- grupo de retiro segun Ley73
       p_es_consulta      SMALLINT, -- booleana que indica si es una consulta o inicio de tramite
       v_tiene_spess      SMALLINT, -- booleana que indica si tiene una resolucion en SPESS
       v_id_datamart      LIKE ret_datamart.id_datamart,
       v_aivs_viv92       DECIMAL(24,6), -- saldo AIVs de viv92
       v_aivs_viv97       DECIMAL(24,6), -- saldo AIVs de viv97
       v_pesos_viv92      DECIMAL(22,2), -- saldo pesos de viv92
       v_pesos_viv97      DECIMAL(22,2), -- saldo pesos de viv97
       v_resultado        SMALLINT, -- resultado de la consulta
       v_tiene_credito    SMALLINT, -- booleana que indica si se tiene un credito vigente
       v_tipo_credito     SMALLINT, -- clave del tipo de credito
       v_fecha_resolucion DATE, -- fecha de resolucion en el SPESS
       v_saldo_total      DECIMAL(24,6), -- saldo total (viv92 + viv97)
       v_consulta         STRING,
       v_rch_cod          SMALLINT,
       v_existe_43_bis    SMALLINT,
       v_rch_desc         CHAR(40),
       v_causal_paso      SMALLINT,
      v_cod_rechazo       SMALLINT,  
       v_diagnostico      SMALLINT,       --diagnostico de la consulta del saldo en la afore
       v_estatus          SMALLINT        -- estatus de la cuenta individual segun la consulta del saldo en la Afore


    -- se calcula saldo total
    LET v_consulta = ""
    LET v_rch_cod  = 0
    LET v_rch_desc = ""
    LET v_resultado = 0


    -- se verifica si tuvo/tiene un retiro de devolucion
    IF ( fn_nss_tuvo_retiro(p_nss) ) THEN
        -- se rechaza por insuficiencia de saldo
        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 8, 0, TODAY,0)
        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 4, 0, TODAY,0)
        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 12, 0, TODAY,0)
    ELSE
        -- se verifica si el derechohabiente tiene un credito vigente
        --CALL fn_ret_ley73_credito_vigente(p_nss, p_grupo_ley73) RETURNING v_tiene_credito, v_tipo_credito
        DISPLAY "Se consulta la convivencia de marcas " 
        LET v_consulta = "EXECUTE FUNCTION fn_consulta_convivencia('",p_nss,"',0,803)";

        DISPLAY "La sentencia SQL ,", v_consulta

        PREPARE s_con_convive FROM v_consulta
        EXECUTE s_con_convive INTO v_rch_cod, v_rch_desc
        DISPLAY "El valor regresado por la funcion de consulta de la convivencia marcas ,", v_rch_cod
        IF ( v_rch_cod <> 0 ) THEN
            IF ( v_rch_cod = 592 OR v_rch_cod = 593 OR v_rch_cod = 594 OR 
                 v_rch_cod = 595 OR v_rch_cod = 596 OR v_rch_cod = 597 OR 
                 v_rch_cod = 814 ) THEN
                IF v_rch_cod = 595 OR v_rch_cod = 596 OR v_rch_cod = 593 OR v_rch_cod = 594 THEN 
                    IF v_rch_cod = 595 THEN 
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_laudo_tramitado, 8, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_laudo_tramitado, 4, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_laudo_tramitado, 12, 0, TODAY,0)
                    ELSE 
                        IF v_rch_cod = 596 THEN 
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_amparo_tramitado, 8, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_amparo_tramitado, 4, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_amparo_tramitado, 12, 0, TODAY,0)
                        ELSE
                            IF v_rch_cod = 593 THEN 
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cargo_juridico, 8, 0, TODAY,0)
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cargo_juridico, 4, 0, TODAY,0)
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cargo_juridico, 12, 0, TODAY,0)
                            ELSE 
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_por_cargo_juridico, 8, 0, TODAY,0)
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_por_cargo_juridico, 4, 0, TODAY,0)
                                CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_pagado_por_cargo_juridico, 12, 0, TODAY,0)
                            END IF 
                        END IF 
                    END IF 
                ELSE 
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cuenta_marcada_laudo, 8, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cuenta_marcada_laudo, 4, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_cuenta_marcada_laudo, 12, 0, TODAY,0)
                END IF 
            ELSE 
                IF ( v_rch_cod = 150 OR v_rch_cod = 151 OR v_rch_cod = 280 OR 
                     v_rch_cod = 401 OR v_rch_cod = 501 OR v_rch_cod = 502 OR 
                     v_rch_cod = 503 OR v_rch_cod = 504 OR v_rch_cod = 701 OR 
                     v_rch_cod = 702 ) THEN
                    LET v_causal_paso = 0;
                    CASE v_rch_cod
                        WHEN 150 -- inhabilitacion por unificación imss
                            LET v_causal_paso = gi_inhabil_por_unificacion_imss

                        WHEN 151 -- inhabilitacion por unificación solo infonavit
                            LET v_causal_paso = gi_inhabil_por_unif_infonavit

                        WHEN 501 -- Unificación IMSS unificador 
                            LET v_causal_paso = gi_unif_imss_unificador

                        WHEN 502 -- Unificación IMSS unificado 
                            LET v_causal_paso = gi_unif_imss_unificado

                        WHEN 280 -- Separación de Cuentas
                            LET v_causal_paso = gi_sep_ctas

                        WHEN 701 -- Separación de Cuentas Invadido
                            LET v_causal_paso = gi_sep_ctas_invadido

                        WHEN 702 -- Separación de Cuentas Asociado
                            LET v_causal_paso = gi_sep_ctas_asociado
                            
                        OTHERWISE -- En otro proceso administrativo
                            LET v_causal_paso = gi_cuenta_con_marca_admiva

                    END CASE       
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 8, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 4, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 12, 0, TODAY,0)
                    LET v_causal_paso = 0;
                ELSE
                    IF ( v_rch_cod = 803 OR v_rch_cod = 805 OR v_rch_cod = 806 OR 
                         v_rch_cod = 808 OR v_rch_cod = 815 ) THEN
                        LET v_causal_paso = 0;
                        CASE v_rch_cod
                            WHEN 803 -- Retiro Ley 73
                                LET v_causal_paso = gi_retiro_ley73

                            WHEN 805 -- Retiro por Disposición de Recursos
                                LET v_causal_paso = gi_retiro_disposicion

                            WHEN 806 -- Retiro por Transferencia de Recursos
                                LET v_causal_paso = gi_retiro_transferencia

                            WHEN 808 -- Retiro por Disposición de Recursos PMG
                                LET v_causal_paso = gi_retiro_pmg
                                
                            WHEN 815 -- Retiro Ley 73 Ventanilla Afore
                                LET v_causal_paso = gi_retiro_ley73_va

                            OTHERWISE -- En otro proceso de Retiro
                                LET v_causal_paso = gi_cuenta_en_proceso_de_retiro

                        END CASE       
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 8, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 4, 0, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_causal_paso, 12, 0, TODAY,0)
                        LET v_causal_paso = 0;
                    ELSE
                        IF ( v_rch_cod = 201 OR v_rch_cod = 203 OR v_rch_cod = 204 OR 
                             v_rch_cod = 205 OR v_rch_cod = 210 OR v_rch_cod = 211 OR 
                             v_rch_cod = 214 OR v_rch_cod = 215 OR v_rch_cod = 216 OR 
                             v_rch_cod = 217 OR v_rch_cod = 221 OR v_rch_cod = 231 ) THEN
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_tiene_credito_vigente, 8, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_tiene_credito_vigente, 4, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_tiene_credito_vigente, 12, 0, TODAY,0)
                        ELSE
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_error_marca_no_convive, 8, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_error_marca_no_convive, 4, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_error_marca_no_convive, 12, 0, TODAY,0)
                        END IF  
                    END IF 
                END IF 
            END IF 
        ELSE 
           ---- En esta parte se debe implementar la consula a ADAI para saber si hay un caso abierto
           ---- Pendiente creacion por parte de ADAI para el WS
           ----
            -- se consulta el saldo en la afore via WS
            CALL fn_consulta_saldo_vivienda_afore(p_nss, 30)
            RETURNING v_diagnostico, v_estatus, v_aivs_viv92, v_pesos_viv92, v_aivs_viv97, v_pesos_viv97,v_cod_rechazo
            CALL fn_guarda_consulta_ws_vent_afore(p_nss, 3, 3, TODAY, CURRENT HOUR TO SECOND, v_diagnostico, v_estatus,
                                                  v_aivs_viv92, v_aivs_viv97, 'OPSISSACI', '', '', 1)
            DISPLAY "Diagnóstico devuelto >", v_diagnostico, "<"
            DISPLAY "Estatus devuelto     >", v_estatus, "<"
            IF v_diagnostico = 101 AND v_estatus = 101 THEN 
                LET v_saldo_total = v_aivs_viv92 + v_aivs_viv97
                -- si el saldo es mayor a cero
                IF ( v_saldo_total > 0 ) THEN
                    LET v_existe_43_bis = 0
                    SELECT COUNT(*)
                    INTO   v_existe_43_bis
                    FROM   sfr_marca_activa a, afi_derechohabiente b
                    WHERE  a.id_derechohabiente = b.id_derechohabiente
                    AND    b.nss                = p_nss
                    AND    a.marca IN (202,212,218,232)
                    IF v_existe_43_bis > 0 THEN
                        CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_tiene_credito_vigente, 4, 0, TODAY,0)
                        IF v_aivs_viv92 > 0 THEN 
                            CALL fn_respuesta_ws_ley73(gi_solicitud_aceptada, 0, 8, v_aivs_viv92, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_aceptada, 0, 12, v_aivs_viv92, TODAY,0)
                        ELSE 
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 8, 0, TODAY,0)
                            CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 12, 0, TODAY,0)
                        END IF 
                    ELSE
                        -- el saldo es retirable
                        CALL fn_respuesta_ws_ley73(gi_solicitud_aceptada, 0, 8, v_aivs_viv92, TODAY,0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_aceptada, 0, 4, v_aivs_viv97, TODAY, 0)
                        CALL fn_respuesta_ws_ley73(gi_solicitud_aceptada, 0, 12, v_aivs_viv92 + v_aivs_viv97, TODAY, 0)
                    END IF 

                ELSE 
                    -- se rechaza por insuficiencia de saldo
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 8, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 4, 0, TODAY,0)   
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_sin_saldo, 12, 0, TODAY,0)   
                END IF 
            ELSE 
                IF v_diagnostico <> 101 THEN 
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fallo_consulta_saldo_afore, 8, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fallo_consulta_saldo_afore, 4, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, gi_fallo_consulta_saldo_afore, 12, 0, TODAY,0)
                ELSE 
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_cod_rechazo, 8, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_cod_rechazo, 4, 0, TODAY,0)
                    CALL fn_respuesta_ws_ley73(gi_solicitud_rechazada, v_cod_rechazo, 12, 0, TODAY,0)
                END IF 
            END IF 
        END IF 
    END IF 

         
END FUNCTION
{
======================================================================
Clave: 
Nombre: fn_trabajador_resolucion_spess
Fecha creacion: Marzo 22, 2013
Autor: Ivan Vega, EFP
Narrativa del proceso que realiza:
Verifica si el trabajador tiene una resolucion en el SPESS

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio
Ivan Vega     27 Nov 2013             - La busqueda en el SPESS para Ley73 se hace con el regimen
                                        73. Es forzosa esa condicion de acuerdo a reunion en 
                                        infonavit del 26 de nov 2013.
Ivan Vega     13dic2013               - En Causal Pension del IMSS, no se valida diagnostico 101
                                        En Ley 73, no se valida diagnostico 101
Ivan Vega     16Dic2013               - Se solicita agregar Retiro Programado (RP) a la lista
                                        de tipo de pension validos en Fondo de Ahorro causal
                                        Pension del IMSS
Ivan Vega     24Feb2014               - se cambian las reglas de validacion del SPESS para causales de fondo de ahorro
                                        segun indicaciones de Benjamin Rodriguez de Infonavit. Correo del
										21feb2014.
Termino de relación laboral
  Se debe de considerar, que las resoluciones positivas son todas aquellas 
  que en el campo tipo de prestación, son diferentes de 03 negativa de pensión y en los casos en los que el 
  campo tipo de pensión corresponda  a IP - Incapacidad Permanente, el porcentaje deberá de ser igual o mayor al 50%.
  
  ADICIONALMENTE, POR CORREO DE PERLA PEREZ 13 DE MARZO 2014
  Regla: Para TODOS los casos donde el solicitante se perfile en la solicitud como recuperación 
  de recursos del Fondo de Ahorro por TRL, el sistema deberá hacer la consulta al SPES por NSS, 
  en caso de ubicar una pensión procedente, de forma automática deberá generar el pago con tanto adicional,
  en caso contrario continuar con el proceso de pago por el total de lo acumulado en SACI 
  bajo el concepto del Fondo de Ahorro.

Pensión del IMSS
  Se debe de considerar, que las resoluciones positivas son todas aquellas que en el campo 
  tipo de prestación son diferentes de 03 negativa de pensión y en los casos en los que el campo 
  tipo de pensión corresponda  a IP - Incapacidad Permanente, el porcentaje deberá de ser igual 
  o mayor al 50%.

Plan privado de pension:
  Solo se valida el catálogo de planes privados de pensión.

Defunción:
  Tiene que cumplir que el campo Tipo de pensión, corresponda a OR, VI, VO, AS
======================================================================
}
FUNCTION fn_trabajador_resolucion_spess(p_nss, p_causal)
DEFINE  v_tiene_resolucion     SMALLINT, -- booleana que indica si el trabajador tiene resolucion en spess
        p_nss                  LIKE afi_derechohabiente.nss, -- nss del trabajador
        p_causal               SMALLINT, -- causal de retiro
        v_sec_pension          LIKE ret_datamart.sec_pension, -- max secuencia de pension
        v_diag_registro        LIKE ret_datamart.diag_registro, -- diagnostico del registro
        v_id_datamart          LIKE ret_datamart.id_datamart, -- clave de la tabla del datamart
		v_tipo_pension         LIKE ret_datamart.tpo_pension, -- tipo de pension
		v_porcentaje_valuacion LIKE ret_datamart.porcentaje_valuacion, -- porcentaje de valuacion
        v_sql                  STRING
   
   -- se asume que el trabajador no tiene resolucion
   LET v_tiene_resolucion = FALSE
   
   DISPLAY "Validando causal: ", p_causal
   
   CASE p_causal

      -- termino de relacion laboral
      -- se elimina el cruce contra la matriz de derechos, ya que esta no aplica para fondo de ahorro
      WHEN 1
         --LET v_sql = "\nSELECT FIRST 1 MAX(a.sec_pension), a.id_datamart, a.tpo_pension, a.porcentaje_valuacion",
                     --"\nFROM  ret_datamart a,                     ",
                     --"\n      ret_matriz_derecho b                ",
                     --"\nWHERE a.nss            = ?                ", -- el trabajador
                     --"\nAND   a.regimen        = b.regimen        ", -- condiciones del retiro validas
                     --"\nAND   a.tpo_seguro     = b.tpo_seguro     ", 
                     --"\nAND   a.tpo_pension    = b.tpo_pension    ", 
                     --"\nAND   a.tpo_prestacion = b.tpo_prestacion ",
                     --"\nAND   a.tpo_prestacion <> '03'            ", -- dif de negativa de pension
                     --"\nGROUP BY a.id_datamart, a.tpo_pension, a.porcentaje_valuacion   ", 
                     --"\nORDER BY a.id_datamart DESC               " 
         LET v_sql = "\nSELECT MAX(a.sec_pension)                 ",
                     "\nFROM  ret_datamart a                      ",
                     "\nWHERE a.nss            = ?                ", -- el trabajador
                     "\nAND   a.tpo_prestacion <> '03'            " 
         
         PREPARE sid_rellab FROM v_sql
         EXECUTE sid_rellab USING p_nss INTO v_sec_pension
         IF v_sec_pension IS NOT NULL THEN 
             LET v_sql = "\nSELECT FIRST 1 a.id_datamart, a.tpo_pension, a.porcentaje_valuacion",
                         "\nFROM  ret_datamart a                      ",
                         "\nWHERE a.nss            =                  ", p_nss,  -- el trabajador
                         "\nAND   a.tpo_prestacion <> '03'            ", 
                         "\nAND   a.sec_pension    =                  ", v_sec_pension
             
             PREPARE sid_datamartl FROM v_sql
             EXECUTE sid_datamartl INTO v_id_datamart, v_tipo_pension, v_porcentaje_valuacion
         END IF 
         -- si se encontro un registro
         IF ( v_id_datamart IS NOT NULL ) THEN
		    -- si es tipo de pension IP, debe tener porcentaje valuacion
		    IF ( v_tipo_pension = "IP" ) THEN
			   IF ( v_porcentaje_valuacion >= 50 ) THEN
			      -- resolucion valida
			      LET v_tiene_resolucion = TRUE
			   ELSE
			      -- no tiene resolucion valida
			      LET v_tiene_resolucion = FALSE
			   END IF
			ELSE
			   -- es resolucion valida
			   LET v_tiene_resolucion = TRUE
			END IF
         END IF
     
      -- Resolucion de pension otorgada por el IMSS
      WHEN 2
         --LET v_sql = "\nSELECT FIRST 1 MAX(a.sec_pension), a.id_datamart, a.tpo_pension, a.porcentaje_valuacion",
                     --"\nFROM  ret_datamart a,                     ",
                     --"\n      ret_matriz_derecho b                ",
                     --"\nWHERE a.nss            = ?                ", -- el trabajador
                     --"\nAND   a.regimen        = b.regimen        ", -- condiciones del retiro validas
                     --"\nAND   a.tpo_seguro     = b.tpo_seguro     ", 
                     --"\nAND   a.tpo_pension    = b.tpo_pension    ", 
                     --"\nAND   a.tpo_prestacion = b.tpo_prestacion ",
					 --"\nAND   a.tpo_prestacion <> '03'            ", -- dif de negativa de pension
                     --"\nGROUP BY a.id_datamart, a.tpo_pension, a.porcentaje_valuacion   ", 
                     --"\nORDER BY a.id_datamart DESC                       " 
         LET v_sql = "\nSELECT MAX(a.sec_pension)                 ",
                     "\nFROM  ret_datamart a                      ",
                     "\nWHERE a.nss            = ?                ", -- el trabajador
					 "\nAND   a.tpo_prestacion <> '03'            "
         
         PREPARE sid_pensionimss FROM v_sql
         EXECUTE sid_pensionimss USING p_nss INTO v_sec_pension

         IF v_sec_pension IS NOT NULL THEN
             LET v_sql = "\nSELECT FIRST 1 a.id_datamart, a.tpo_pension, a.porcentaje_valuacion",
                         "\nFROM  ret_datamart a                      ",
                         "\nWHERE a.nss            =                  ", p_nss,  -- el trabajador
                         "\nAND   a.tpo_prestacion <> '03'            ",
                         "\nAND   a.sec_pension = ", v_sec_pension
             
             PREPARE sid_datamart FROM v_sql
             EXECUTE sid_datamart INTO v_id_datamart, v_tipo_pension, v_porcentaje_valuacion
         END IF 

         -- si se encontro un registro
         IF ( v_id_datamart IS NOT NULL ) THEN
		    -- si es tipo de pension IP, debe tener porcentaje valuacion
		    IF ( v_tipo_pension = "IP" ) THEN
			   IF ( v_porcentaje_valuacion >= 50 ) THEN
			      -- resolucion valida
			      LET v_tiene_resolucion = TRUE
			   ELSE
			      -- no tiene resolucion valida
			      LET v_tiene_resolucion = FALSE
			   END IF
			ELSE
			   -- es resolucion valida
			   LET v_tiene_resolucion = TRUE
			END IF
         END IF
              
      -- plan privado de pension
      WHEN 3
	     -- 24feb2014. No requiere ser validado, se asume que se tiene
		 LET v_tiene_resolucion = TRUE
         {		 
         SELECT MAX(a.sec_pension), a.id_datamart
         INTO   v_sec_pension, v_id_datamart
         FROM   ret_datamart a
               ,ret_matriz_derecho b
         WHERE a.nss = p_nss
         AND   diag_registro    = 101
         AND   b.tpo_retiro     = 'F'
         AND   TODAY BETWEEN f_inicio_pension AND f_inicio_pension  + 10 UNITS YEAR  
         AND   a.regimen        = b.regimen
         AND   a.tpo_seguro     = 'PP'
         AND   a.tpo_pension    = b.tpo_pension
         AND   a.tpo_prestacion = b.tpo_prestacion
         GROUP BY a.id_datamart
     
         -- si tiene una secuencia de pension, tiene resolucion de pension del imss
         IF ( v_sec_pension IS NOT NULL ) THEN
            LET v_tiene_resolucion = TRUE
         END IF
		 }
     
      WHEN 4
         --SELECT MAX(a.sec_pension)
         --INTO    v_sec_pension
         --FROM    ret_datamart a
                --,ret_matriz_derecho b
         --WHERE  a.nss = p_nss
         --AND    a.regimen        = b.regimen
         --AND    a.tpo_seguro     = b.tpo_seguro
         --AND    a.tpo_pension    IN ('OR','VI','VO','AS')
         --AND    a.tpo_prestacion = b.tpo_prestacion
         SELECT MAX(a.sec_pension)
         INTO    v_sec_pension
         FROM    ret_datamart a
         WHERE  a.nss = p_nss
         AND    a.tpo_pension    IN ('OR','VI','VO','AS')
         -- si tiene una secuencia de pension, tiene resolucion de pension que corresponde con una defuncion
         IF ( v_sec_pension IS NOT NULL ) THEN
            LET v_tiene_resolucion = TRUE
            SELECT  MAX(a.id_datamart)
            INTO    v_id_datamart
            FROM    ret_datamart a
            WHERE  a.nss = p_nss
            AND    a.tpo_pension    IN ('OR','VI','VO','AS')
            AND    a.sec_pension    = v_sec_pension
         END IF
     
      -- ====================================================================================
      -- BUSQUEDA DE RESOLUCION EN EL SPESS PARA LEY 73
      WHEN 5
         -- Resolucion del spess para ley 73
         --LET v_sql = "\nSELECT FIRST 1 MAX(a.sec_pension)",
                     --"\nFROM  ret_datamart a                            ",
                     --"\n      ,ret_matriz_derecho b                     ",
                     --"\nWHERE a.nss            = ?                      ", -- el trabajador
                     --"\nAND   a.regimen        = 73                     ", -- el regimen es forzoso que sea Ley73
                     --"\nAND   b.tpo_retiro     = 'E'                    ", -- retiro avalado por el imss
                     --"\nAND   a.regimen        = b.regimen              ",                      
                     --"\nAND   a.tpo_seguro     = b.tpo_seguro           ", 
                     --"\nAND   a.tpo_pension    = b.tpo_pension          ", 
                     --"\nAND   a.tpo_prestacion = b.tpo_prestacion       "
         --
         --PREPARE sid_ley73 FROM v_sql
         --EXECUTE sid_ley73 USING p_nss INTO v_sec_pension
         --IF v_sec_pension IS NOT NULL THEN 
             --LET v_tiene_resolucion = TRUE
             --SELECT MAX(a.id_datamart)
             --INTO   v_id_datamart
             --FROM   ret_datamart a                            
             --WHERE  a.nss            = p_nss                     
             --AND    a.regimen        = 73                     
             --AND    a.sec_pension    = v_sec_pension
         --END IF 
             -- Resolucion del spess para ley 73
         LET v_sql = "\nSELECT MAX(a.sec_pension)",
                     "\nFROM  ret_datamart a                            ",
                     "\nWHERE a.nss            = ?                      " -- el trabajador
         
         PREPARE sid_ley73 FROM v_sql
         EXECUTE sid_ley73 USING p_nss INTO v_sec_pension
         IF v_sec_pension IS NOT NULL THEN 
             LET v_tiene_resolucion = TRUE
             SELECT MAX(a.id_datamart)
             INTO   v_id_datamart
             FROM   ret_datamart a                            
             WHERE  a.nss            = p_nss                     
             AND    a.sec_pension    = v_sec_pension
         END IF 
     
   END CASE
   
   -- se devuelve el resultado de la consulta
   RETURN v_tiene_resolucion, v_id_datamart
END FUNCTION 
{
======================================================================
Nombre: fn_calcula_saldo_ley73
Fecha creacion: Septiembre 20, 2013
Autor: Ivan Vega, EFP
Narrativa del proceso que realiza:

Registro de modificaciones:
Autor           Fecha                   Descrip. cambio

======================================================================
}
FUNCTION fn_calcula_saldo_ley73(p_nss, p_subcuenta, p_f_valuacion)
DEFINE p_nss                LIKE afi_derechohabiente.nss,
       p_subcuenta          SMALLINT,
       p_f_valuacion        DATE, -- fecha de valuacion
       v_saldo_aivs         DECIMAL(24,6),
       v_saldo_pesos        DECIMAL(22,2), 
       v_resultado_consulta SMALLINT,
       v_sql                STRING

   -- se ejecuta el SP de consulta de saldo
   LET v_sql = "EXECUTE FUNCTION fn_saldo_dia(?,NULL,?,?)"
   
   -- se ejecuta la consulta de saldo
   PREPARE sid_saldo FROM v_sql
   EXECUTE sid_saldo USING p_nss, p_subcuenta, p_f_valuacion
                     INTO v_resultado_consulta, v_saldo_aivs, v_saldo_pesos
                     
      
   -- se devuelve el resultado de la consulta
   RETURN v_resultado_consulta, v_saldo_aivs, v_saldo_pesos
END FUNCTION

