#-------------------------------------------------------------------------------
# File: RETWS_CONSULTA_DATAMART.4gl
# GENERATED BY fglwsdl 101601
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml


GLOBALS "RETWS_CONSULTA_DATAMART.inc"



#-------------------------------------------------------------------------------
# Service: ConsultaDatamart
# Port:    ConsultaDatamartPortType
# Server:  http://172.16.16.204:9955/ConsultaDatamart
#-------------------------------------------------------------------------------

PRIVATE DEFINE fn_consulta_datamartHTTPReq     com.HTTPRequest
PRIVATE DEFINE fn_consulta_datamartHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

#
# Operation: fn_consulta_datamart
#

#
# FUNCTION: fn_consulta_datamart
#
FUNCTION fn_consulta_datamart(p_nss, p_rfc)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_nss		STRING
  DEFINE	p_rfc		STRING

  LET fn_consulta_datamartRequest.nss = p_nss
  LET fn_consulta_datamartRequest.rfc = p_rfc

  LET soapStatus = fn_consulta_datamart_g()

  RETURN soapStatus, fn_consulta_datamartResponse.brokerok, fn_consulta_datamartResponse.nss, fn_consulta_datamartResponse.curp, fn_consulta_datamartResponse.nombre, fn_consulta_datamartResponse.nombreafore, fn_consulta_datamartResponse.paternoafore, fn_consulta_datamartResponse.maternoafore, fn_consulta_datamartResponse.secuencia, fn_consulta_datamartResponse.tipomovimiento, fn_consulta_datamartResponse.regimen, fn_consulta_datamartResponse.tiposeguro, fn_consulta_datamartResponse.tipopension, fn_consulta_datamartResponse.tipoprestacion, fn_consulta_datamartResponse.articulonegativa, fn_consulta_datamartResponse.fraccionnegativa, fn_consulta_datamartResponse.considerando, fn_consulta_datamartResponse.usuario, fn_consulta_datamartResponse.fechainiciopension, fn_consulta_datamartResponse.fechaemisionresolucion, fn_consulta_datamartResponse.numeroresolucion, fn_consulta_datamartResponse.porcentajeevaluacion, fn_consulta_datamartResponse.semanascotizadas, fn_consulta_datamartResponse.diagnosticoregistro, fn_consulta_datamartResponse.fechacargadatamart, fn_consulta_datamartResponse.fechaproceso, fn_consulta_datamartResponse.mensaje
END FUNCTION

#
# FUNCTION: fn_consulta_datamart_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fn_consulta_datamartRequest
#   OUTPUT: GLOBAL fn_consulta_datamartResponse
#
FUNCTION fn_consulta_datamart_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ConsultaDatamart_ConsultaDatamartPortTypeLocation IS NULL THEN
    LET ConsultaDatamart_ConsultaDatamartPortTypeLocation = "http://172.16.16.204:9955/ConsultaDatamart"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ConsultaDatamart_ConsultaDatamartPortTypeLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(fn_consulta_datamartRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,fn_consulta_datamartResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fn_consulta_datamartRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF fn_consulta_datamartHTTPReq IS NOT NULL AND fn_consulta_datamartHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ConsultaDatamart_ConsultaDatamartPortTypeLocation IS NULL THEN
      LET ConsultaDatamart_ConsultaDatamartPortTypeLocation = "http://172.16.16.204:9955/ConsultaDatamart"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fn_consulta_datamartHTTPReq = com.HTTPRequest.Create(ConsultaDatamart_ConsultaDatamartPortTypeLocation)
    CALL fn_consulta_datamartHTTPReq.setMethod("POST")
    CALL fn_consulta_datamartHTTPReq.setCharset("UTF-8")
    CALL fn_consulta_datamartHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fn_consulta_datamartHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = fn_consulta_datamartHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(fn_consulta_datamartRequest,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL fn_consulta_datamartHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fn_consulta_datamartHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fn_consulta_datamartHTTPResp = fn_consulta_datamartHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fn_consulta_datamartHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fn_consulta_datamartResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.StaxReader

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF fn_consulta_datamartHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fn_consulta_datamartHTTPResp IS NULL THEN
      # Still no response, try again
      LET fn_consulta_datamartHTTPResp = fn_consulta_datamartHTTPReq.getAsyncResponse()
    END IF

    IF fn_consulta_datamartHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE fn_consulta_datamartHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = fn_consulta_datamartHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL fn_consulta_datamartHTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = fn_consulta_datamartHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,fn_consulta_datamartResponse)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL fn_consulta_datamartHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fn_consulta_datamartHTTPResp.getStatusCode()||" ("||fn_consulta_datamartHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fn_consulta_datamartHTTPReq = NULL
  LET fn_consulta_datamartHTTPResp = NULL
  RETURN wsstatus
END FUNCTION


