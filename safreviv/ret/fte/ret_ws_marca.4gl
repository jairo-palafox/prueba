#-------------------------------------------------------------------------------
# File: ret_ws_marca.4gl
# GENERATED BY fglwsdl 141859
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml


GLOBALS "ret_ws_marca.inc"



#-------------------------------------------------------------------------------
# Service: retiroMarcaLey73
# Port:    retiroMarcaLey73PortType
# Server:  http://10.90.8.132/marcaLey73/ws/r/retiroMarcaLey73
#-------------------------------------------------------------------------------

PRIVATE DEFINE fn_marcaje_ley73HTTPReq     com.HTTPRequest
PRIVATE DEFINE fn_marcaje_ley73HTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

#
# Operation: fn_marcaje_ley73
#

#
# FUNCTION: fn_marcaje_ley73
#
FUNCTION fn_marcaje_ley73(p_nss, p_caso_adai, p_cuenta_clabe, p_ind_marca, p_cod_rechazo, p_grupo, p_medio_entrega)
  DEFINE	p_nss		STRING
  DEFINE	p_caso_adai		STRING
  DEFINE	p_cuenta_clabe		STRING
  DEFINE	p_ind_marca		SMALLINT
  DEFINE	p_cod_rechazo		SMALLINT
  DEFINE	p_grupo		SMALLINT
  DEFINE	p_medio_entrega		SMALLINT
  DEFINE	soapStatus		INTEGER


  LET fn_marcaje_ley73Request.nss = p_nss
  LET fn_marcaje_ley73Request.caso_adai = p_caso_adai
  LET fn_marcaje_ley73Request.cuenta_clabe = p_cuenta_clabe
  LET fn_marcaje_ley73Request.ind_marca = p_ind_marca
  LET fn_marcaje_ley73Request.cod_rechazo = p_cod_rechazo
  LET fn_marcaje_ley73Request.grupo = p_grupo
  LET fn_marcaje_ley73Request.medio_entrega = p_medio_entrega

  LET soapStatus = fn_marcaje_ley73_g()

  RETURN soapStatus, fn_marcaje_ley73Response.nss, fn_marcaje_ley73Response.est_marca, fn_marcaje_ley73Response.con_retiro, fn_marcaje_ley73Response.cod_rechazo, fn_marcaje_ley73Response.des_rechazo, fn_marcaje_ley73Response.saldo_aivs_viv92, fn_marcaje_ley73Response.saldo_pesos_viv92, fn_marcaje_ley73Response.saldo_aivs_viv97, fn_marcaje_ley73Response.saldo_pesos_viv97
END FUNCTION

#
# FUNCTION: fn_marcaje_ley73_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fn_marcaje_ley73Request
#   OUTPUT: GLOBAL fn_marcaje_ley73Response
#
FUNCTION fn_marcaje_ley73_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri IS NULL THEN
    -- QA
    -- LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri = "http://10.90.8.132/marcaLey73/ws/r/retiroMarcaLey73"
    -- PROD
    LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri = "http://10.90.0.148/marcaLey73/ws/r/retiroMarcaLey73"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"fn_marcaje_ley73\"")
    CALL WSHelper_SetRequestHeaders(request, retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Request.Headers)
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Version)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL request.setHeader("Content-Encoding",retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL request.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(fn_marcaje_ley73Request,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(response, retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Response.Headers)
      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,fn_marcaje_ley73Response)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fn_marcaje_ley73Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter

  #
  # CHECK PREVIOUS CALL  
  #
  IF fn_marcaje_ley73HTTPReq IS NOT NULL AND fn_marcaje_ley73HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri IS NULL THEN
      -- QA 
      --LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri = "http://10.90.8.132/marcaLey73/ws/r/retiroMarcaLey73"
      -- PROD
      LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri = "http://10.90.0.148/marcaLey73/ws/r/retiroMarcaLey73"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fn_marcaje_ley73HTTPReq = com.HTTPRequest.Create(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri)
    CALL fn_marcaje_ley73HTTPReq.setMethod("POST")
    CALL fn_marcaje_ley73HTTPReq.setCharset("UTF-8")
    CALL fn_marcaje_ley73HTTPReq.setHeader("SOAPAction","\"fn_marcaje_ley73\"")
    CALL WSHelper_SetRequestHeaders(fn_marcaje_ley73HTTPReq, retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Request.Headers)
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Version IS NOT NULL THEN
      CALL fn_marcaje_ley73HTTPReq.setVersion(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Version)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fn_marcaje_ley73HTTPReq.setHeader("Cookie",retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fn_marcaje_ley73HTTPReq.setConnectionTimeout(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ConnectionTimeout)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fn_marcaje_ley73HTTPReq.setTimeout(retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.ReadWriteTimeout)
    END IF
    IF retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.CompressRequest IS NOT NULL THEN
      CALL fn_marcaje_ley73HTTPReq.setHeader("Content-Encoding",retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.CompressRequest)
    END IF
    CALL fn_marcaje_ley73HTTPReq.setHeader("Accept-Encoding","gzip, deflate")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fn_marcaje_ley73HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # Stax request
    #
    TRY
      LET writer = fn_marcaje_ley73HTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      #
      # STAX SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToStax(fn_marcaje_ley73Request,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL fn_marcaje_ley73HTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fn_marcaje_ley73HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fn_marcaje_ley73HTTPResp = fn_marcaje_ley73HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fn_marcaje_ley73HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fn_marcaje_ley73Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.StaxReader

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fn_marcaje_ley73HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fn_marcaje_ley73HTTPResp IS NULL THEN
      # Still no response, try again
      LET fn_marcaje_ley73HTTPResp = fn_marcaje_ley73HTTPReq.getAsyncResponse()
    END IF

    IF fn_marcaje_ley73HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fn_marcaje_ley73HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Address.Uri)
      END IF

      #
      # RETRIEVE HTTP RESPONSE Headers
      #
      CALL WSHelper_SetResponseHeaders(fn_marcaje_ley73HTTPResp, retiroMarcaLey73_retiroMarcaLey73PortTypeEndpoint.Binding.Response.Headers)
      CASE fn_marcaje_ley73HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = fn_marcaje_ley73HTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          ELSE
            IF WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL reader.nextSibling() # Skip SOAP headers
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11FaultUntilDetail(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11FaultDetail(reader) THEN
            #
            # STAX SOAP FAULT DESERIALIZE
            #
            CALL reader.nextSibling() # Skip SOAP detail
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndFault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL fn_marcaje_ley73HTTPResp.endXmlResponse(reader)

        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = fn_marcaje_ley73HTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          # Process SOAP headers 
          IF WSHelper_CheckStaxSOAP11Header(reader) AND NOT reader.isEmptyElement() THEN
            LET nb = 0
            CALL reader.nextTag()
            WHILE (reader.getEventType()=="START_ELEMENT")
              IF WSHelper_CheckStaxSOAP11HeaderActor(reader,uri) THEN
                LET mustUnderstand = WSHelper_GetStaxSOAP11HeaderMustUnderstand(reader)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # STAX SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  CALL reader.nextSibling() # Skip header, not necessary
                END IF
              ELSE
                CALL reader.nextSibling() # Skip header, not intended to us
              END IF
            END WHILE
            IF NOT WSHelper_CheckStaxSOAP11Header(reader) THEN
              CALL WSHelper_FillSOAP11WSError("Client","No ending header tag found")
              EXIT CASE
            ELSE
              IF nb != 0 THEN
                CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
                EXIT CASE
              ELSE
                CALL reader.nextTag()
              END IF
            END IF
          ELSE
           IF reader.isEmptyElement() THEN
             CALL reader.nextTag()
           END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          #
          # STAX SOAP RESPONSE DESERIALIZE
          #
          CALL xml.Serializer.StaxToVariable(reader,fn_marcaje_ley73Response)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL fn_marcaje_ley73HTTPResp.endXmlResponse(reader)
          LET wsstatus = 0

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fn_marcaje_ley73HTTPResp.getStatusCode()||" ("||fn_marcaje_ley73HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fn_marcaje_ley73HTTPReq = NULL
  LET fn_marcaje_ley73HTTPResp = NULL
  RETURN wsstatus

END FUNCTION


